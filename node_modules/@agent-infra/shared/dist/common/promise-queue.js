/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    PromiseQueue: ()=>PromiseQueue
});
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class PromiseQueue {
    add(task) {
        return new Promise((resolve, reject)=>{
            this.queue.push(async ()=>{
                try {
                    const result = await task();
                    resolve(result);
                    return result;
                } catch (error) {
                    reject(error);
                    throw error;
                }
            });
            this.run();
        });
    }
    async run() {
        if (this.running >= this.concurrency || 0 === this.queue.length) return;
        this.running++;
        const task = this.queue.shift();
        try {
            const result = await task();
            this.results.push(result);
        } catch (error) {} finally{
            this.running--;
            this.run();
        }
    }
    async waitAll() {
        while(this.running > 0 || this.queue.length > 0)await new Promise((resolve)=>setTimeout(resolve, 100));
        return this.results;
    }
    constructor(concurrency = 1){
        _define_property(this, "queue", []);
        _define_property(this, "concurrency", void 0);
        _define_property(this, "running", 0);
        _define_property(this, "results", []);
        this.concurrency = concurrency;
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=promise-queue.js.map