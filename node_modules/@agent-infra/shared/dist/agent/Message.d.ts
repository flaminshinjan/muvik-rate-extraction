/**
 * Agent execution states
 */
export declare enum AgentState {
    IDLE = "IDLE",
    RUNNING = "RUNNING",
    FINISHED = "FINISHED",
    ERROR = "ERROR"
}
export interface Function {
    name: string;
    arguments: string;
}
export interface ToolCall {
    id: string;
    type: string;
    function: Function;
}
export type MessageRole = 'system' | 'user' | 'assistant' | 'tool';
export interface MessageData {
    role: MessageRole;
    content?: string | null;
    tool_calls?: ToolCall[];
    name?: string;
    tool_call_id?: string;
}
/**
 * Represents a chat message in the conversation
 */
export declare class Message {
    readonly role: MessageRole;
    readonly content: string | null;
    readonly tool_calls?: ToolCall[];
    readonly name?: string;
    readonly tool_call_id?: string;
    constructor({ role, content, tool_calls, name, tool_call_id, }: MessageData);
    /**
     * Serialize message to a plain object
     */
    toJSON(): MessageData;
    /**
     * Convert message to dictionary format
     */
    toObject(): Record<string, any>;
    /**
     * Create a user message
     */
    static userMessage(content: string): Message;
    /**
     * Create a system message
     */
    static systemMessage(content: string): Message;
    /**
     * Create an assistant message
     */
    static assistantMessage(content?: string | null): Message;
    /**
     * Create a tool message
     */
    static toolMessage(content: string, name: string, tool_call_id: string): Message;
    /**
     * Create ToolCallsMessage from raw tool calls
     */
    static fromToolCalls(tool_calls: ToolCall[], content?: string, kwargs?: Record<string, any>): Message;
    /**
     * Convert message instance to plain object for IPC transfer
     */
    static toTransferableData(message: Message): MessageData;
    /**
     * Create Message instance from transferable data
     */
    static fromTransferableData(data: MessageData): Message;
}
//# sourceMappingURL=Message.d.ts.map