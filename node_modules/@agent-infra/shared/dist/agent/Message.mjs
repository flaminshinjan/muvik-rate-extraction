/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var Message_rslib_entry_AgentState = /*#__PURE__*/ function(AgentState) {
    AgentState["IDLE"] = "IDLE";
    AgentState["RUNNING"] = "RUNNING";
    AgentState["FINISHED"] = "FINISHED";
    AgentState["ERROR"] = "ERROR";
    return AgentState;
}({});
class Message {
    toJSON() {
        const data = {
            role: this.role
        };
        if (null !== this.content) data.content = this.content;
        if (this.tool_calls) data.tool_calls = this.tool_calls;
        if (this.name) data.name = this.name;
        if (this.tool_call_id) data.tool_call_id = this.tool_call_id;
        return data;
    }
    toObject() {
        const message = {
            role: this.role
        };
        if (null !== this.content) message.content = this.content;
        if (void 0 !== this.tool_calls) message.tool_calls = this.tool_calls;
        if (void 0 !== this.name) message.name = this.name;
        if (void 0 !== this.tool_call_id) message.tool_call_id = this.tool_call_id;
        return message;
    }
    static userMessage(content) {
        return new Message({
            role: 'user',
            content
        });
    }
    static systemMessage(content) {
        return new Message({
            role: 'system',
            content
        });
    }
    static assistantMessage(content = null) {
        return new Message({
            role: 'assistant',
            content
        });
    }
    static toolMessage(content, name, tool_call_id) {
        return new Message({
            role: 'tool',
            content,
            name,
            tool_call_id
        });
    }
    static fromToolCalls(tool_calls, content = '', kwargs = {}) {
        const formattedCalls = tool_calls.map((call)=>({
                id: call.id,
                function: call.function,
                type: 'function'
            }));
        return new Message({
            role: 'assistant',
            content,
            tool_calls: formattedCalls,
            ...kwargs
        });
    }
    static toTransferableData(message) {
        return {
            role: message.role,
            content: message.content,
            tool_calls: message.tool_calls,
            name: message.name,
            tool_call_id: message.tool_call_id
        };
    }
    static fromTransferableData(data) {
        return new Message(data);
    }
    constructor({ role, content = null, tool_calls, name, tool_call_id }){
        _define_property(this, "role", void 0);
        _define_property(this, "content", void 0);
        _define_property(this, "tool_calls", void 0);
        _define_property(this, "name", void 0);
        _define_property(this, "tool_call_id", void 0);
        this.role = role;
        this.content = content;
        this.tool_calls = tool_calls;
        this.name = name;
        this.tool_call_id = tool_call_id;
    }
}
export { Message_rslib_entry_AgentState as AgentState, Message };

//# sourceMappingURL=Message.mjs.map