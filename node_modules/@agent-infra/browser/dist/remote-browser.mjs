/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE_puppeteer_core_17481843__ from "puppeteer-core";
import * as __WEBPACK_EXTERNAL_MODULE__base_browser_mjs_64d751a3__ from "./base-browser.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class RemoteBrowser extends __WEBPACK_EXTERNAL_MODULE__base_browser_mjs_64d751a3__.BaseBrowser {
    async launch(options) {
        var _this_options;
        this.logger.info('Browser Launch options:', options);
        let browserWSEndpoint = null === (_this_options = this.options) || void 0 === _this_options ? void 0 : _this_options.wsEndpoint;
        if (!browserWSEndpoint) {
            var _this_options1;
            const cdpEndpoint = (null === (_this_options1 = this.options) || void 0 === _this_options1 ? void 0 : _this_options1.cdpEndpoint) || "http://127.0.0.1:9222/json/version";
            const response = await fetch(cdpEndpoint);
            const { webSocketDebuggerUrl } = await response.json();
            browserWSEndpoint = webSocketDebuggerUrl;
        }
        this.logger.info('Using WebSocket endpoint:', browserWSEndpoint);
        const puppeteerConnectOptions = {
            browserWSEndpoint,
            defaultViewport: (null == options ? void 0 : options.defaultViewport) ?? {
                width: 1280,
                height: 800
            }
        };
        try {
            this.browser = await __WEBPACK_EXTERNAL_MODULE_puppeteer_core_17481843__.connect(puppeteerConnectOptions);
            await this.setupPageListener();
            this.logger.success('Connected to remote browser successfully');
        } catch (error) {
            this.logger.error('Failed to connect to remote browser:', error);
            throw error;
        }
    }
    constructor(options){
        super(options), _define_property(this, "options", void 0), this.options = options;
    }
}
export { RemoteBrowser };

//# sourceMappingURL=remote-browser.mjs.map