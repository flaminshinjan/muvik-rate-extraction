import * as puppeteer from 'puppeteer-core';
import { Logger } from '@agent-infra/logger';
import { BrowserInterface, EvaluateOnNewPageOptions, LaunchOptions, Page } from './types';
/**
 * Configuration options for the BaseBrowser class
 * @interface BaseBrowserOptions
 * @property {Logger} [logger] - Custom logger instance to use for browser logging
 */
export interface BaseBrowserOptions {
    logger?: Logger;
}
/**
 * Abstract base class that implements common browser automation functionality
 * Provides a foundation for specific browser implementations with shared capabilities
 * @abstract
 * @implements {BrowserInterface}
 */
export declare abstract class BaseBrowser implements BrowserInterface {
    /**
     * The underlying Puppeteer browser instance
     * @protected
     */
    protected browser: puppeteer.Browser | null;
    /**
     * Logger instance for browser-related logging
     * @protected
     */
    protected logger: Logger;
    /**
     * Reference to the currently active browser page
     * @protected
     */
    protected activePage: Page | null;
    /**
     * Creates an instance of BaseBrowser
     * @param {BaseBrowserOptions} [options] - Configuration options
     */
    constructor(options?: BaseBrowserOptions);
    /**
     * Check if the browser instance is active and responding
     * @returns {Promise<boolean>} True if browser is active, false otherwise
     */
    isBrowserAlive(): Promise<boolean>;
    /**
     * Get the underlying Puppeteer browser instance
     * @throws Error if browser is not launched
  
     * @returns {puppeteer.Browser} Puppeteer browser instance
     */
    getBrowser(): puppeteer.Browser;
    /**
     * Sets up listeners for browser page events
     * Tracks page creation and updates active page reference
     * @protected
     */
    protected setupPageListener(): Promise<void>;
    /**
     * Launches the browser with specified options
     * @abstract
     * @param {LaunchOptions} [options] - Browser launch configuration options
     * @returns {Promise<void>} Promise that resolves when browser is launched
     */
    abstract launch(options?: LaunchOptions): Promise<void>;
    /**
     * Closes the browser instance and cleans up resources
     * @returns {Promise<void>} Promise that resolves when browser is closed
     * @throws {Error} If browser fails to close properly
     */
    close(): Promise<void>;
    /**
     * Creates a new page, navigates to the specified URL, executes a function in the page context, and returns the result
     * This method is inspired and modified from https://github.com/egoist/local-web-search/blob/04608ed09aa103e2fff6402c72ca12edfb692d19/src/browser.ts#L74
     * @template T - Type of parameters passed to the page function
     * @template R - Return type of the page function
     * @param {EvaluateOnNewPageOptions<T, R>} options - Configuration options for the page evaluation
     * @returns {Promise<R | null>} Promise resolving to the result of the page function or null
     * @throws {Error} If page creation or evaluation fails
     */
    evaluateOnNewPage<T extends any[], R>(options: EvaluateOnNewPageOptions<T, R>): Promise<R | null>;
    /**
     * Creates a new browser page
     * @returns {Promise<Page>} Promise resolving to the newly created page
     * @throws {Error} If browser is not launched or page creation fails
     */
    createPage(): Promise<Page>;
    /**
     * Gets the currently active page or finds an active page if none is currently tracked
     * If no active pages exist, creates a new page
     * @returns {Promise<Page>} Promise resolving to the active page
     * @throws {Error} If browser is not launched or no active page can be found/created
     */
    getActivePage(): Promise<Page>;
}
//# sourceMappingURL=base-browser.d.ts.map