/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getAnyChromeStable: ()=>getAnyChromeStable
});
const external_fs_namespaceObject = require("fs");
const external_path_namespaceObject = require("path");
const external_which_namespaceObject = require("which");
var external_which_default = /*#__PURE__*/ __webpack_require__.n(external_which_namespaceObject);
const platform = process.platform;
function getChromeOnLinux(list) {
    try {
        for (const name of list){
            const path = external_which_default().sync(name);
            return path;
        }
    } catch (e) {}
    return null;
}
function getChromeOnWindows(name) {
    const suffix = `${external_path_namespaceObject.sep}Google${external_path_namespaceObject.sep}${name}${external_path_namespaceObject.sep}Application${external_path_namespaceObject.sep}chrome.exe`;
    const prefixes = [
        process.env.LOCALAPPDATA,
        process.env.PROGRAMFILES,
        process.env['PROGRAMFILES(X86)']
    ].filter(Boolean);
    for (const prefix of prefixes){
        const chrome = (0, external_path_namespaceObject.join)(prefix, suffix);
        if ((0, external_fs_namespaceObject.existsSync)(chrome)) return chrome;
    }
    return null;
}
function getChromeOnDarwin(name) {
    const suffix = `/Applications/${name}.app/Contents/MacOS/${name}`;
    const prefixes = [
        '',
        process.env.HOME
    ].filter((item)=>void 0 !== item);
    for (const prefix of prefixes){
        const chromePath = (0, external_path_namespaceObject.join)(prefix, suffix);
        if ((0, external_fs_namespaceObject.existsSync)(chromePath)) return chromePath;
    }
    return null;
}
const chromePaths = {
    chrome: {
        linux: ()=>getChromeOnLinux([
                'google-chrome-stable',
                'google-chrome'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome'),
        win32: ()=>getChromeOnWindows('Chrome')
    },
    beta: {
        linux: ()=>getChromeOnLinux([
                'google-chrome-beta'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome Beta'),
        win32: ()=>getChromeOnWindows('Chrome Beta')
    },
    dev: {
        linux: ()=>getChromeOnLinux([
                'google-chrome-dev'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome Dev'),
        win32: ()=>getChromeOnWindows('Chrome Dev')
    },
    canary: {
        linux: ()=>getChromeOnLinux([
                'chromium-browser',
                'chromium'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome Canary'),
        win32: ()=>getChromeOnWindows('Chrome SxS')
    }
};
function getChromePath() {
    const chrome = chromePaths.chrome;
    if (platform && Object.keys(chrome).includes(platform)) {
        const pth = chrome[platform]();
        if (pth) return pth;
    }
}
function getChromeBetaPath() {
    const beta = chromePaths.beta;
    if (platform && Object.keys(beta).includes(platform)) {
        const pth = beta[platform]();
        if (pth) return pth;
    }
}
function getChromeDevPath() {
    const dev = chromePaths.dev;
    if (platform && Object.keys(dev).includes(platform)) {
        const pth = dev[platform]();
        if (pth) return pth;
    }
}
function getChromeCanaryPath() {
    const canary = chromePaths.canary;
    if (platform && Object.keys(canary).includes(platform)) {
        const pth = canary[platform]();
        if (pth) return pth;
    }
}
function getAnyChromeStable() {
    const chrome = getChromePath();
    if (chrome) return chrome;
    const beta = getChromeBetaPath();
    if (beta) return beta;
    const dev = getChromeDevPath();
    if (dev) return dev;
    const canary = getChromeCanaryPath();
    if (canary) return canary;
    const error = new Error('Unable to find any chrome browser.');
    error.name = 'ChromePathsError';
    throw error;
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=chrome-paths.js.map