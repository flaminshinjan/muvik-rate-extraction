/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    BrowserFinder: ()=>BrowserFinder
});
const logger_namespaceObject = require("@agent-infra/logger");
const external_edge_paths_namespaceObject = require("edge-paths");
const external_chrome_paths_js_namespaceObject = require("./chrome-paths.js");
const external_firefox_paths_js_namespaceObject = require("./firefox-paths.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class BrowserFinder {
    findBrowser(name) {
        const platform = process.platform;
        let browserPath;
        let browserType;
        this.logger.info('Find browser on platform:', platform);
        if (![
            'darwin',
            'win32',
            'linux'
        ].includes(platform)) {
            const error = new Error(`Unsupported platform: ${platform}`);
            this.logger.error(error.message);
            throw error;
        }
        switch(name){
            case 'chrome':
                browserPath = this.findChrome();
                browserType = 'chrome';
                break;
            case 'edge':
                browserPath = this.findEdge();
                browserType = 'edge';
                break;
            case 'firefox':
                browserPath = this.findFirefox();
                browserType = 'firefox';
                break;
            default:
                const value = this.findAnyBrowser();
                browserPath = value.path;
                browserType = value.type;
                break;
        }
        this.logger.info('browserPath:', browserPath);
        return {
            path: browserPath,
            type: browserType
        };
    }
    findChrome() {
        try {
            return (0, external_chrome_paths_js_namespaceObject.getAnyChromeStable)();
        } catch (e) {
            this.logger.error('Find Chrome Error:', e);
            throw e;
        }
    }
    findEdge() {
        try {
            return (0, external_edge_paths_namespaceObject.getAnyEdgeStable)();
        } catch (e) {
            this.logger.error('Find Edge Error:', e);
            throw e;
        }
    }
    findFirefox() {
        try {
            return (0, external_firefox_paths_js_namespaceObject.getAnyFirefoxStable)();
        } catch (e) {
            this.logger.error('Find Firefox Error:', e);
            throw e;
        }
    }
    findAnyBrowser() {
        try {
            return {
                path: (0, external_chrome_paths_js_namespaceObject.getAnyChromeStable)(),
                type: 'chrome'
            };
        } catch (e) {
            this.logger.warn('Find Chrome Error:', e);
        }
        try {
            return {
                path: (0, external_edge_paths_namespaceObject.getAnyEdgeStable)(),
                type: 'edge'
            };
        } catch (e) {
            this.logger.warn('Find Edge Error:', e);
        }
        try {
            return {
                path: (0, external_firefox_paths_js_namespaceObject.getAnyFirefoxStable)(),
                type: 'firefox'
            };
        } catch (e) {
            this.logger.warn('Find Firefox Error:', e);
        }
        const error = new Error('Unable to find any browser.');
        error.name = 'BrowserPathsError';
        throw error;
    }
    constructor(logger){
        _define_property(this, "logger", void 0);
        this.logger = logger ?? logger_namespaceObject.defaultLogger;
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=index.js.map