/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE_fs__ from "fs";
import * as __WEBPACK_EXTERNAL_MODULE_path__ from "path";
import * as __WEBPACK_EXTERNAL_MODULE_which__ from "which";
const platform = process.platform;
function getFirefoxOnLinux(name) {
    try {
        const path = __WEBPACK_EXTERNAL_MODULE_which__["default"].sync(name);
        return path;
    } catch (e) {}
    return null;
}
function getFirefoxOnWindows(name) {
    const suffix = `${__WEBPACK_EXTERNAL_MODULE_path__.sep}${name}${__WEBPACK_EXTERNAL_MODULE_path__.sep}firefox.exe`;
    const prefixes = [
        process.env.LOCALAPPDATA,
        process.env.PROGRAMFILES,
        process.env['PROGRAMFILES(X86)']
    ].filter(Boolean);
    for (const prefix of prefixes){
        const firefoxPath = (0, __WEBPACK_EXTERNAL_MODULE_path__.join)(prefix, suffix);
        if ((0, __WEBPACK_EXTERNAL_MODULE_fs__.existsSync)(firefoxPath)) return firefoxPath;
    }
    return null;
}
function getFireFoxOnDarwin(name) {
    const suffix = `/Applications/${name}.app/Contents/MacOS/firefox`;
    const prefixes = [
        '',
        process.env.HOME
    ].filter((item)=>void 0 !== item);
    for (const prefix of prefixes){
        const firefoxPath = (0, __WEBPACK_EXTERNAL_MODULE_path__.join)(prefix, suffix);
        if ((0, __WEBPACK_EXTERNAL_MODULE_fs__.existsSync)(firefoxPath)) return firefoxPath;
    }
    return null;
}
const firefoxPaths = {
    firefox: {
        linux: ()=>getFirefoxOnLinux('firefox'),
        darwin: ()=>getFireFoxOnDarwin('Firefox'),
        win32: ()=>getFirefoxOnWindows('Mozilla Firefox')
    },
    dev: {
        darwin: ()=>getFireFoxOnDarwin('Firefox Developer Edition'),
        win32: ()=>getFirefoxOnWindows('Firefox Developer Edition')
    },
    nightly: {
        darwin: ()=>getFireFoxOnDarwin('Firefox Nightly'),
        win32: ()=>getFirefoxOnWindows('Firefox Nightly')
    }
};
function getFirefoxPath() {
    const firefox = firefoxPaths.firefox;
    if (platform && Object.keys(firefox).includes(platform)) {
        const pth = firefox[platform]();
        if (pth) return pth;
    }
}
function getFirefoxDevPath() {
    const dev = firefoxPaths.dev;
    if (platform && Object.keys(dev).includes(platform)) {
        const pth = dev[platform]();
        if (pth) return pth;
    }
}
function getFirefoxNightlyPath() {
    const nightly = firefoxPaths.nightly;
    if (platform && Object.keys(nightly).includes(platform)) {
        const pth = nightly[platform]();
        if (pth) return pth;
    }
}
function getAnyFirefoxStable() {
    const firefox = getFirefoxPath();
    if (firefox) return firefox;
    const dev = getFirefoxDevPath();
    if (dev) return dev;
    const canary = getFirefoxNightlyPath();
    if (canary) return canary;
    const error = new Error('Unable to find any firefox browser.');
    error.name = 'FirefoxPathsError';
    throw error;
}
export { getAnyFirefoxStable };

//# sourceMappingURL=firefox-paths.mjs.map