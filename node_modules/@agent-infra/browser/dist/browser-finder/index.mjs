/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__agent_infra_logger_ddae3da2__ from "@agent-infra/logger";
import * as __WEBPACK_EXTERNAL_MODULE_edge_paths_335d45e8__ from "edge-paths";
import * as __WEBPACK_EXTERNAL_MODULE__chrome_paths_mjs_6a8bf971__ from "./chrome-paths.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__firefox_paths_mjs_7d752188__ from "./firefox-paths.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class BrowserFinder {
    findBrowser(name) {
        const platform = process.platform;
        let browserPath;
        let browserType;
        this.logger.info('Find browser on platform:', platform);
        if (![
            'darwin',
            'win32',
            'linux'
        ].includes(platform)) {
            const error = new Error(`Unsupported platform: ${platform}`);
            this.logger.error(error.message);
            throw error;
        }
        switch(name){
            case 'chrome':
                browserPath = this.findChrome();
                browserType = 'chrome';
                break;
            case 'edge':
                browserPath = this.findEdge();
                browserType = 'edge';
                break;
            case 'firefox':
                browserPath = this.findFirefox();
                browserType = 'firefox';
                break;
            default:
                const value = this.findAnyBrowser();
                browserPath = value.path;
                browserType = value.type;
                break;
        }
        this.logger.info('browserPath:', browserPath);
        return {
            path: browserPath,
            type: browserType
        };
    }
    findChrome() {
        try {
            return (0, __WEBPACK_EXTERNAL_MODULE__chrome_paths_mjs_6a8bf971__.getAnyChromeStable)();
        } catch (e) {
            this.logger.error('Find Chrome Error:', e);
            throw e;
        }
    }
    findEdge() {
        try {
            return (0, __WEBPACK_EXTERNAL_MODULE_edge_paths_335d45e8__.getAnyEdgeStable)();
        } catch (e) {
            this.logger.error('Find Edge Error:', e);
            throw e;
        }
    }
    findFirefox() {
        try {
            return (0, __WEBPACK_EXTERNAL_MODULE__firefox_paths_mjs_7d752188__.getAnyFirefoxStable)();
        } catch (e) {
            this.logger.error('Find Firefox Error:', e);
            throw e;
        }
    }
    findAnyBrowser() {
        try {
            return {
                path: (0, __WEBPACK_EXTERNAL_MODULE__chrome_paths_mjs_6a8bf971__.getAnyChromeStable)(),
                type: 'chrome'
            };
        } catch (e) {
            this.logger.warn('Find Chrome Error:', e);
        }
        try {
            return {
                path: (0, __WEBPACK_EXTERNAL_MODULE_edge_paths_335d45e8__.getAnyEdgeStable)(),
                type: 'edge'
            };
        } catch (e) {
            this.logger.warn('Find Edge Error:', e);
        }
        try {
            return {
                path: (0, __WEBPACK_EXTERNAL_MODULE__firefox_paths_mjs_7d752188__.getAnyFirefoxStable)(),
                type: 'firefox'
            };
        } catch (e) {
            this.logger.warn('Find Firefox Error:', e);
        }
        const error = new Error('Unable to find any browser.');
        error.name = 'BrowserPathsError';
        throw error;
    }
    constructor(logger){
        _define_property(this, "logger", void 0);
        this.logger = logger ?? __WEBPACK_EXTERNAL_MODULE__agent_infra_logger_ddae3da2__.defaultLogger;
    }
}
export { BrowserFinder };

//# sourceMappingURL=index.mjs.map