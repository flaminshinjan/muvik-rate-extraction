/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    getAnyFirefoxStable: ()=>getAnyFirefoxStable
});
const external_fs_namespaceObject = require("fs");
const external_path_namespaceObject = require("path");
const external_which_namespaceObject = require("which");
var external_which_default = /*#__PURE__*/ __webpack_require__.n(external_which_namespaceObject);
const platform = process.platform;
function getFirefoxOnLinux(name) {
    try {
        const path = external_which_default().sync(name);
        return path;
    } catch (e) {}
    return null;
}
function getFirefoxOnWindows(name) {
    const suffix = `${external_path_namespaceObject.sep}${name}${external_path_namespaceObject.sep}firefox.exe`;
    const prefixes = [
        process.env.LOCALAPPDATA,
        process.env.PROGRAMFILES,
        process.env['PROGRAMFILES(X86)']
    ].filter(Boolean);
    for (const prefix of prefixes){
        const firefoxPath = (0, external_path_namespaceObject.join)(prefix, suffix);
        if ((0, external_fs_namespaceObject.existsSync)(firefoxPath)) return firefoxPath;
    }
    return null;
}
function getFireFoxOnDarwin(name) {
    const suffix = `/Applications/${name}.app/Contents/MacOS/firefox`;
    const prefixes = [
        '',
        process.env.HOME
    ].filter((item)=>void 0 !== item);
    for (const prefix of prefixes){
        const firefoxPath = (0, external_path_namespaceObject.join)(prefix, suffix);
        if ((0, external_fs_namespaceObject.existsSync)(firefoxPath)) return firefoxPath;
    }
    return null;
}
const firefoxPaths = {
    firefox: {
        linux: ()=>getFirefoxOnLinux('firefox'),
        darwin: ()=>getFireFoxOnDarwin('Firefox'),
        win32: ()=>getFirefoxOnWindows('Mozilla Firefox')
    },
    dev: {
        darwin: ()=>getFireFoxOnDarwin('Firefox Developer Edition'),
        win32: ()=>getFirefoxOnWindows('Firefox Developer Edition')
    },
    nightly: {
        darwin: ()=>getFireFoxOnDarwin('Firefox Nightly'),
        win32: ()=>getFirefoxOnWindows('Firefox Nightly')
    }
};
function getFirefoxPath() {
    const firefox = firefoxPaths.firefox;
    if (platform && Object.keys(firefox).includes(platform)) {
        const pth = firefox[platform]();
        if (pth) return pth;
    }
}
function getFirefoxDevPath() {
    const dev = firefoxPaths.dev;
    if (platform && Object.keys(dev).includes(platform)) {
        const pth = dev[platform]();
        if (pth) return pth;
    }
}
function getFirefoxNightlyPath() {
    const nightly = firefoxPaths.nightly;
    if (platform && Object.keys(nightly).includes(platform)) {
        const pth = nightly[platform]();
        if (pth) return pth;
    }
}
function getAnyFirefoxStable() {
    const firefox = getFirefoxPath();
    if (firefox) return firefox;
    const dev = getFirefoxDevPath();
    if (dev) return dev;
    const canary = getFirefoxNightlyPath();
    if (canary) return canary;
    const error = new Error('Unable to find any firefox browser.');
    error.name = 'FirefoxPathsError';
    throw error;
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=firefox-paths.js.map