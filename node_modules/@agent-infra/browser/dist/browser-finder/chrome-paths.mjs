/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE_fs__ from "fs";
import * as __WEBPACK_EXTERNAL_MODULE_path__ from "path";
import * as __WEBPACK_EXTERNAL_MODULE_which__ from "which";
const platform = process.platform;
function getChromeOnLinux(list) {
    try {
        for (const name of list){
            const path = __WEBPACK_EXTERNAL_MODULE_which__["default"].sync(name);
            return path;
        }
    } catch (e) {}
    return null;
}
function getChromeOnWindows(name) {
    const suffix = `${__WEBPACK_EXTERNAL_MODULE_path__.sep}Google${__WEBPACK_EXTERNAL_MODULE_path__.sep}${name}${__WEBPACK_EXTERNAL_MODULE_path__.sep}Application${__WEBPACK_EXTERNAL_MODULE_path__.sep}chrome.exe`;
    const prefixes = [
        process.env.LOCALAPPDATA,
        process.env.PROGRAMFILES,
        process.env['PROGRAMFILES(X86)']
    ].filter(Boolean);
    for (const prefix of prefixes){
        const chrome = (0, __WEBPACK_EXTERNAL_MODULE_path__.join)(prefix, suffix);
        if ((0, __WEBPACK_EXTERNAL_MODULE_fs__.existsSync)(chrome)) return chrome;
    }
    return null;
}
function getChromeOnDarwin(name) {
    const suffix = `/Applications/${name}.app/Contents/MacOS/${name}`;
    const prefixes = [
        '',
        process.env.HOME
    ].filter((item)=>void 0 !== item);
    for (const prefix of prefixes){
        const chromePath = (0, __WEBPACK_EXTERNAL_MODULE_path__.join)(prefix, suffix);
        if ((0, __WEBPACK_EXTERNAL_MODULE_fs__.existsSync)(chromePath)) return chromePath;
    }
    return null;
}
const chromePaths = {
    chrome: {
        linux: ()=>getChromeOnLinux([
                'google-chrome-stable',
                'google-chrome'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome'),
        win32: ()=>getChromeOnWindows('Chrome')
    },
    beta: {
        linux: ()=>getChromeOnLinux([
                'google-chrome-beta'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome Beta'),
        win32: ()=>getChromeOnWindows('Chrome Beta')
    },
    dev: {
        linux: ()=>getChromeOnLinux([
                'google-chrome-dev'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome Dev'),
        win32: ()=>getChromeOnWindows('Chrome Dev')
    },
    canary: {
        linux: ()=>getChromeOnLinux([
                'chromium-browser',
                'chromium'
            ]),
        darwin: ()=>getChromeOnDarwin('Google Chrome Canary'),
        win32: ()=>getChromeOnWindows('Chrome SxS')
    }
};
function getChromePath() {
    const chrome = chromePaths.chrome;
    if (platform && Object.keys(chrome).includes(platform)) {
        const pth = chrome[platform]();
        if (pth) return pth;
    }
}
function getChromeBetaPath() {
    const beta = chromePaths.beta;
    if (platform && Object.keys(beta).includes(platform)) {
        const pth = beta[platform]();
        if (pth) return pth;
    }
}
function getChromeDevPath() {
    const dev = chromePaths.dev;
    if (platform && Object.keys(dev).includes(platform)) {
        const pth = dev[platform]();
        if (pth) return pth;
    }
}
function getChromeCanaryPath() {
    const canary = chromePaths.canary;
    if (platform && Object.keys(canary).includes(platform)) {
        const pth = canary[platform]();
        if (pth) return pth;
    }
}
function getAnyChromeStable() {
    const chrome = getChromePath();
    if (chrome) return chrome;
    const beta = getChromeBetaPath();
    if (beta) return beta;
    const dev = getChromeDevPath();
    if (dev) return dev;
    const canary = getChromeCanaryPath();
    if (canary) return canary;
    const error = new Error('Unable to find any chrome browser.');
    error.name = 'ChromePathsError';
    throw error;
}
export { getAnyChromeStable };

//# sourceMappingURL=chrome-paths.mjs.map