import { BaseBrowser, BaseBrowserOptions } from './base-browser';
import { LaunchOptions } from './types';
/**
 * Configuration options for RemoteBrowser
 * @extends BaseBrowserOptions
 * @interface RemoteBrowserOptions
 * @property {string} [wsEndpoint] - WebSocket endpoint URL for direct connection
 * @property {string} [cdpEndpoint] - Remote Chrome DevTools Protocol endpoint
 */
export interface RemoteBrowserOptions extends BaseBrowserOptions {
    wsEndpoint?: string;
    /** @default http://localhost:9222/json/version */
    cdpEndpoint?: string;
}
/**
 * RemoteBrowser class for connecting to remote browser instances
 *
 * Currently, this RemoteBrowser is not production ready,
 * mainly because it still relies on `puppeteer-core`,
 * which can only run on Node.js.
 *
 * At the same time, Chrome instances built with
 * `--remote-debugging-address` on Linux have security risks
 *
 * @see https://issues.chromium.org/issues/41487252
 * @see https://issues.chromium.org/issues/40261787
 * @see https://github.com/pyppeteer/pyppeteer/pull/379
 * @see https://stackoverflow.com/questions/72760355/chrome-remote-debugging-not-working-computer-to-computer
 *
 * @extends BaseBrowser
 */
export declare class RemoteBrowser extends BaseBrowser {
    private options?;
    /**
     * Creates a new RemoteBrowser instance
     * @param {RemoteBrowserOptions} [options] - Configuration options for remote browser connection
     */
    constructor(options?: RemoteBrowserOptions | undefined);
    /**
     * Connects to a remote browser instance using WebSocket
     * If no WebSocket endpoint is provided, attempts to discover it using the DevTools Protocol
     * @param {LaunchOptions} [options] - Launch configuration options
     * @returns {Promise<void>} Promise that resolves when connected to the remote browser
     * @throws {Error} If connection to the remote browser fails
     */
    launch(options?: LaunchOptions): Promise<void>;
}
//# sourceMappingURL=remote-browser.d.ts.map