/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    RemoteBrowser: ()=>RemoteBrowser
});
const external_puppeteer_core_namespaceObject = require("puppeteer-core");
const external_base_browser_js_namespaceObject = require("./base-browser.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class RemoteBrowser extends external_base_browser_js_namespaceObject.BaseBrowser {
    async launch(options) {
        var _this_options;
        this.logger.info('Browser Launch options:', options);
        let browserWSEndpoint = null === (_this_options = this.options) || void 0 === _this_options ? void 0 : _this_options.wsEndpoint;
        if (!browserWSEndpoint) {
            var _this_options1;
            const cdpEndpoint = (null === (_this_options1 = this.options) || void 0 === _this_options1 ? void 0 : _this_options1.cdpEndpoint) || "http://127.0.0.1:9222/json/version";
            const response = await fetch(cdpEndpoint);
            const { webSocketDebuggerUrl } = await response.json();
            browserWSEndpoint = webSocketDebuggerUrl;
        }
        this.logger.info('Using WebSocket endpoint:', browserWSEndpoint);
        const puppeteerConnectOptions = {
            browserWSEndpoint,
            defaultViewport: (null == options ? void 0 : options.defaultViewport) ?? {
                width: 1280,
                height: 800
            }
        };
        try {
            this.browser = await external_puppeteer_core_namespaceObject.connect(puppeteerConnectOptions);
            await this.setupPageListener();
            this.logger.success('Connected to remote browser successfully');
        } catch (error) {
            this.logger.error('Failed to connect to remote browser:', error);
            throw error;
        }
    }
    constructor(options){
        super(options), _define_property(this, "options", void 0), this.options = options;
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=remote-browser.js.map