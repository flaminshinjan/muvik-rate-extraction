/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    LocalBrowser: ()=>LocalBrowser
});
const external_puppeteer_core_namespaceObject = require("puppeteer-core");
const index_js_namespaceObject = require("./browser-finder/index.js");
const external_base_browser_js_namespaceObject = require("./base-browser.js");
class LocalBrowser extends external_base_browser_js_namespaceObject.BaseBrowser {
    async launch(options = {}) {
        var _options_defaultViewport, _options_defaultViewport1;
        this.logger.info('Launching browser with options:', options);
        const { path, type } = this.getBrowserInfo(options);
        const viewportWidth = (null == options ? void 0 : null === (_options_defaultViewport = options.defaultViewport) || void 0 === _options_defaultViewport ? void 0 : _options_defaultViewport.width) ?? 1280;
        const viewportHeight = (null == options ? void 0 : null === (_options_defaultViewport1 = options.defaultViewport) || void 0 === _options_defaultViewport1 ? void 0 : _options_defaultViewport1.height) ?? 800;
        const puppeteerLaunchOptions = {
            browser: type,
            executablePath: path,
            dumpio: (null == options ? void 0 : options.dumpio) ?? false,
            headless: (null == options ? void 0 : options.headless) ?? false,
            defaultViewport: {
                width: viewportWidth,
                height: viewportHeight,
                deviceScaleFactor: 0
            },
            ...options.userDataDir && {
                userDataDir: options.userDataDir
            },
            args: [
                '--no-sandbox',
                '--mute-audio',
                '--disable-gpu',
                '--disable-http2',
                '--disable-blink-features=AutomationControlled',
                '--disable-infobars',
                '--disable-background-timer-throttling',
                '--disable-popup-blocking',
                '--disable-backgrounding-occluded-windows',
                '--disable-renderer-backgrounding',
                '--disable-window-activation',
                '--disable-focus-on-load',
                '--no-default-browser-check',
                '--disable-web-security',
                '--disable-features=IsolateOrigins,site-per-process',
                '--disable-site-isolation-trials',
                `--window-size=${viewportWidth},${viewportHeight + 90}`,
                (null == options ? void 0 : options.proxy) ? `--proxy-server=${options.proxy}` : '',
                (null == options ? void 0 : options.proxyBypassList) ? `--proxy-bypass-list=${options.proxyBypassList}` : '',
                (null == options ? void 0 : options.profilePath) ? `--profile-directory=${options.profilePath}` : '',
                ...options.args ?? []
            ].filter((item)=>{
                if ('firefox' === type) {
                    if ('--disable-features=IsolateOrigins,site-per-process' === item || item === `--window-size=${viewportWidth},${viewportHeight + 90}`) return false;
                }
                return !!item;
            }),
            ignoreDefaultArgs: [
                '--enable-automation'
            ],
            timeout: options.timeout ?? 0,
            downloadBehavior: {
                policy: 'deny'
            }
        };
        this.logger.info('Launch options:', puppeteerLaunchOptions);
        try {
            this.browser = await external_puppeteer_core_namespaceObject.launch(puppeteerLaunchOptions);
            await this.setupPageListener();
            this.logger.success('Browser launched successfully');
        } catch (error) {
            this.logger.error('Failed to launch browser:', error);
            throw error;
        }
    }
    getBrowserInfo(options = {}) {
        const map = {
            chrome: 'chrome',
            edge: 'chrome',
            firefox: 'firefox'
        };
        let browserPath = options.executablePath;
        let browserType = options.browserType && map[options.browserType];
        if (browserPath) {
            if (!browserType) {
                const lowercasePath = browserPath.toLowerCase();
                browserType = lowercasePath.includes('chrome') ? 'chrome' : lowercasePath.includes('edge') ? 'chrome' : lowercasePath.includes('firefox') ? 'firefox' : 'chrome';
            }
        } else {
            const browserInfo = new index_js_namespaceObject.BrowserFinder(this.logger).findBrowser();
            browserPath = browserInfo.path;
            browserType = map[browserInfo.type];
        }
        this.logger.info('Using executable path:', browserPath);
        return {
            path: browserPath,
            type: browserType
        };
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=local-browser.js.map