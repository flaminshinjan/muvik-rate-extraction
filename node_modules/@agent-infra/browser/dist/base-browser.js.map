{"version":3,"file":"base-browser.js","sources":["webpack://@agent-infra/browser/./src/base-browser.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as puppeteer from 'puppeteer-core';\nimport { Logger, defaultLogger } from '@agent-infra/logger';\nimport {\n  BrowserInterface,\n  EvaluateOnNewPageOptions,\n  LaunchOptions,\n  Page,\n} from './types';\n\n/**\n * Configuration options for the BaseBrowser class\n * @interface BaseBrowserOptions\n * @property {Logger} [logger] - Custom logger instance to use for browser logging\n */\nexport interface BaseBrowserOptions {\n  logger?: Logger;\n}\n\n/**\n * Abstract base class that implements common browser automation functionality\n * Provides a foundation for specific browser implementations with shared capabilities\n * @abstract\n * @implements {BrowserInterface}\n */\nexport abstract class BaseBrowser implements BrowserInterface {\n  /**\n   * The underlying Puppeteer browser instance\n   * @protected\n   */\n  protected browser: puppeteer.Browser | null = null;\n\n  /**\n   * Logger instance for browser-related logging\n   * @protected\n   */\n  protected logger: Logger;\n\n  /**\n   * Reference to the currently active browser page\n   * @protected\n   */\n  protected activePage: Page | null = null;\n\n  /**\n   * Creates an instance of BaseBrowser\n   * @param {BaseBrowserOptions} [options] - Configuration options\n   */\n  constructor(options?: BaseBrowserOptions) {\n    this.logger = options?.logger ?? defaultLogger;\n    this.logger.info('Browser Options:', options);\n  }\n\n  /**\n   * Check if the browser instance is active and responding\n   * @returns {Promise<boolean>} True if browser is active, false otherwise\n   */\n  async isBrowserAlive(): Promise<boolean> {\n    if (!this.browser) {\n      return false;\n    }\n\n    try {\n      // Try to get browser version to check if it's still responding\n      const version = await this.browser.version();\n      this.logger.info('Browser version:', version);\n      return true;\n    } catch (error) {\n      this.logger.warn('Browser instance is no longer active:', error);\n      this.browser = null;\n      return false;\n    }\n  }\n\n  /**\n   * Get the underlying Puppeteer browser instance\n   * @throws Error if browser is not launched\n\n   * @returns {puppeteer.Browser} Puppeteer browser instance\n   */\n  getBrowser(): puppeteer.Browser {\n    if (!this.browser) {\n      throw new Error('Browser not launched');\n    }\n    return this.browser;\n  }\n\n  /**\n   * Sets up listeners for browser page events\n   * Tracks page creation and updates active page reference\n   * @protected\n   */\n  protected async setupPageListener() {\n    if (!this.browser) return;\n\n    this.browser.on('targetcreated', async (target) => {\n      const page = await target.page();\n      if (page) {\n        this.logger.info('New page created:', await page.url());\n        this.activePage = page;\n\n        page.once('close', () => {\n          if (this.activePage === page) {\n            this.activePage = null;\n          }\n        });\n\n        page.once('error', () => {\n          if (this.activePage === page) {\n            this.activePage = null;\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Launches the browser with specified options\n   * @abstract\n   * @param {LaunchOptions} [options] - Browser launch configuration options\n   * @returns {Promise<void>} Promise that resolves when browser is launched\n   */\n  abstract launch(options?: LaunchOptions): Promise<void>;\n\n  /**\n   * Closes the browser instance and cleans up resources\n   * @returns {Promise<void>} Promise that resolves when browser is closed\n   * @throws {Error} If browser fails to close properly\n   */\n  async close(): Promise<void> {\n    this.logger.info('Closing browser');\n    try {\n      await this.browser?.close();\n      this.browser = null;\n      this.logger.success('Browser closed successfully');\n    } catch (error) {\n      this.logger.error('Failed to close browser:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Creates a new page, navigates to the specified URL, executes a function in the page context, and returns the result\n   * This method is inspired and modified from https://github.com/egoist/local-web-search/blob/04608ed09aa103e2fff6402c72ca12edfb692d19/src/browser.ts#L74\n   * @template T - Type of parameters passed to the page function\n   * @template R - Return type of the page function\n   * @param {EvaluateOnNewPageOptions<T, R>} options - Configuration options for the page evaluation\n   * @returns {Promise<R | null>} Promise resolving to the result of the page function or null\n   * @throws {Error} If page creation or evaluation fails\n   */\n  async evaluateOnNewPage<T extends any[], R>(\n    options: EvaluateOnNewPageOptions<T, R>,\n  ): Promise<R | null> {\n    const {\n      url,\n      pageFunction,\n      pageFunctionParams,\n      beforePageLoad,\n      afterPageLoad,\n      beforeSendResult,\n      waitForOptions,\n    } = options;\n    const page = await this.browser!.newPage();\n    try {\n      await beforePageLoad?.(page);\n      await page.goto(url, {\n        waitUntil: 'networkidle2',\n        ...waitForOptions,\n      });\n      await afterPageLoad?.(page);\n      const _window = await page.evaluateHandle(() => window);\n      const result = await page.evaluate(\n        pageFunction,\n        _window,\n        ...pageFunctionParams,\n      );\n      await beforeSendResult?.(page, result);\n      await _window.dispose();\n      await page.close();\n      return result;\n    } catch (error) {\n      await page.close();\n      throw error;\n    }\n  }\n\n  /**\n   * Creates a new browser page\n   * @returns {Promise<Page>} Promise resolving to the newly created page\n   * @throws {Error} If browser is not launched or page creation fails\n   */\n  async createPage(): Promise<Page> {\n    if (!this.browser) {\n      this.logger.error('No active browser');\n      throw new Error('Browser not launched');\n    }\n\n    const page = await this.browser.newPage();\n    return page;\n  }\n\n  /**\n   * Gets the currently active page or finds an active page if none is currently tracked\n   * If no active pages exist, creates a new page\n   * @returns {Promise<Page>} Promise resolving to the active page\n   * @throws {Error} If browser is not launched or no active page can be found/created\n   */\n  async getActivePage(): Promise<Page> {\n    if (!this.browser) {\n      throw new Error('Browser not launched');\n    }\n\n    // If activePage exists and is still available, return directly\n    if (this.activePage) {\n      try {\n        // Verify that the page is still available\n        await this.activePage.evaluate(() => document.readyState);\n        return this.activePage;\n      } catch (e) {\n        this.logger.warn('Active page no longer available:', e);\n        this.activePage = null;\n      }\n    }\n\n    // Get all pages and find the last active page\n    const pages = await this.browser.pages();\n\n    if (pages.length === 0) {\n      this.activePage = await this.createPage();\n      return this.activePage;\n    }\n\n    // Find the last responding page\n    for (let i = pages.length - 1; i >= 0; i--) {\n      const page = pages[i];\n      try {\n        await page.evaluate(() => document.readyState);\n        this.activePage = page;\n        return page;\n      } catch (e) {\n        continue;\n      }\n    }\n\n    throw new Error('No active page found');\n  }\n}\n"],"names":["BaseBrowser","version","error","Error","target","page","_this_browser","options","url","pageFunction","pageFunctionParams","beforePageLoad","afterPageLoad","beforeSendResult","waitForOptions","_window","window","result","document","e","pages","i","defaultLogger"],"mappings":"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"}