/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    createChatModel: ()=>createChatModel
});
const external_context_js_namespaceObject = require("../context.js");
const openai_namespaceObject = require("@langchain/openai");
const external_utils_js_namespaceObject = require("../utils.js");
const logger = (0, external_utils_js_namespaceObject.createLogger)('agent_helper');
function createChatModel(agentName, providerName, providerConfig, modelName) {
    const maxTokens = 2000;
    const maxCompletionTokens = 5000;
    let temperature = 0;
    const topP = 0.001;
    switch(providerName){
        case external_context_js_namespaceObject.LLMProviderEnum.AzureOpenAI:
            {
                if (agentName === external_context_js_namespaceObject.AgentNameEnum.Planner) temperature = 0.02;
                const args = {
                    model: modelName,
                    apiKey: providerConfig.apiKey,
                    configuration: {}
                };
                if (providerConfig.baseUrl) args.configuration = {
                    baseURL: providerConfig.baseUrl
                };
                if (modelName.startsWith('o')) args.modelKwargs = {
                    max_completion_tokens: maxCompletionTokens
                };
                else {
                    args.topP = topP;
                    args.temperature = temperature;
                    args.maxTokens = maxTokens;
                }
                logger.info('azure args', args);
                return new openai_namespaceObject.AzureChatOpenAI(args);
            }
        default:
            throw new Error(`Provider ${providerName} not supported yet`);
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=helper.js.map