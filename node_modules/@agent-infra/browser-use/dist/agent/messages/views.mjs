/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__langchain_core_messages_57fab301__ from "@langchain/core/messages";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class MessageHistory {
    addMessage(message, metadata = {
        inputTokens: 0
    }, position) {
        const managedMessage = {
            message,
            metadata
        };
        if (void 0 === position) this.messages.push(managedMessage);
        else this.messages.splice(position, 0, managedMessage);
        this.totalTokens += metadata.inputTokens;
    }
    removeMessage(index = -1) {
        if (this.messages.length > 0) {
            const msg = this.messages.splice(index, 1)[0];
            this.totalTokens -= msg.metadata.inputTokens;
        }
    }
    removeLastHumanMessage() {
        if (this.messages.length > 2 && this.messages[this.messages.length - 1].message instanceof __WEBPACK_EXTERNAL_MODULE__langchain_core_messages_57fab301__.HumanMessage) {
            const msg = this.messages.pop();
            if (msg) this.totalTokens -= msg.metadata.inputTokens;
        }
    }
    constructor(){
        _define_property(this, "messages", []);
        _define_property(this, "totalTokens", 0);
    }
}
export { MessageHistory };

//# sourceMappingURL=views.mjs.map