/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    BasePrompt: ()=>BasePrompt
});
const messages_namespaceObject = require("@langchain/core/messages");
const external_utils_js_namespaceObject = require("../../utils.js");
(0, external_utils_js_namespaceObject.createLogger)('agent/prompts/base');
class BasePrompt {
    async buildBrowserStateUserMessage(context) {
        var _browserState_pages;
        const browserState = await context.browserContext.getState();
        const elementsText = browserState.elementTree.clickableElementsToString(context.options.includeAttributes);
        const hasContentAbove = (browserState.pixelsAbove || 0) > 0;
        const hasContentBelow = (browserState.pixelsBelow || 0) > 0;
        let formattedElementsText = '';
        if ('' !== elementsText) {
            formattedElementsText = hasContentAbove ? `... ${browserState.pixelsAbove} pixels above - scroll up to see more ...\n${elementsText}` : `[Start of page]\n${elementsText}`;
            formattedElementsText = hasContentBelow ? `${formattedElementsText}\n... ${browserState.pixelsBelow} pixels below - scroll down to see more ...` : `${formattedElementsText}\n[End of page]`;
        } else formattedElementsText = 'empty page';
        let stepInfoDescription = '';
        if (context.stepInfo) stepInfoDescription = `Current step: ${context.stepInfo.stepNumber + 1}/${context.stepInfo.maxSteps}`;
        const timeStr = new Date().toISOString().slice(0, 16).replace('T', ' ');
        stepInfoDescription += `Current date and time: ${timeStr}`;
        let actionResultsDescription = '';
        if (context.actionResults.length > 0) for(let i = 0; i < context.actionResults.length; i++){
            const result = context.actionResults[i];
            if (result.extractedContent) actionResultsDescription += `\nAction result ${i + 1}/${context.actionResults.length}: ${result.extractedContent}`;
            if (result.error) {
                const error = result.error.slice(-300);
                actionResultsDescription += `\nAction error ${i + 1}/${context.actionResults.length}: ...${error}`;
            }
        }
        const stateDescription = `
    [Task history memory ends here]
    [Current state starts here]
    You will see the following only once - if you need to remember it and you dont know it yet, write it down in the memory:
    Current page: {url: ${browserState.url}, title: ${browserState.title}}
    Other available pages:
    ${null === (_browserState_pages = browserState.pages) || void 0 === _browserState_pages ? void 0 : _browserState_pages.filter((page)=>page.url !== browserState.url).map((page)=>` - {url: ${page.url}, title: ${page.title}}`).join('\n')}
    Interactive elements from current page:
    ${formattedElementsText}
    ${stepInfoDescription}
    ${actionResultsDescription}`;
        if (browserState.screenshot && context.options.useVision) return new messages_namespaceObject.HumanMessage({
            content: [
                {
                    type: 'text',
                    text: stateDescription
                },
                {
                    type: 'image_url',
                    image_url: {
                        url: `data:image/jpeg;base64,${browserState.screenshot}`
                    }
                }
            ]
        });
        return new messages_namespaceObject.HumanMessage(stateDescription);
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=base.js.map