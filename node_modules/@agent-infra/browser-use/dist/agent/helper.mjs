/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__context_mjs_8809e571__ from "../context.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__langchain_openai_3716a69b__ from "@langchain/openai";
import * as __WEBPACK_EXTERNAL_MODULE__utils_mjs_2b03add0__ from "../utils.mjs";
const logger = (0, __WEBPACK_EXTERNAL_MODULE__utils_mjs_2b03add0__.createLogger)('agent_helper');
function createChatModel(agentName, providerName, providerConfig, modelName) {
    const maxTokens = 2000;
    const maxCompletionTokens = 5000;
    let temperature = 0;
    const topP = 0.001;
    switch(providerName){
        case __WEBPACK_EXTERNAL_MODULE__context_mjs_8809e571__.LLMProviderEnum.AzureOpenAI:
            {
                if (agentName === __WEBPACK_EXTERNAL_MODULE__context_mjs_8809e571__.AgentNameEnum.Planner) temperature = 0.02;
                const args = {
                    model: modelName,
                    apiKey: providerConfig.apiKey,
                    configuration: {}
                };
                if (providerConfig.baseUrl) args.configuration = {
                    baseURL: providerConfig.baseUrl
                };
                if (modelName.startsWith('o')) args.modelKwargs = {
                    max_completion_tokens: maxCompletionTokens
                };
                else {
                    args.topP = topP;
                    args.temperature = temperature;
                    args.maxTokens = maxTokens;
                }
                logger.info('azure args', args);
                return new __WEBPACK_EXTERNAL_MODULE__langchain_openai_3716a69b__.AzureChatOpenAI(args);
            }
        default:
            throw new Error(`Provider ${providerName} not supported yet`);
    }
}
export { createChatModel };

//# sourceMappingURL=helper.mjs.map