/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__types_mjs_4ad50757__ from "./types.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__agents_navigator_mjs_a38d407b__ from "./agents/navigator.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__agents_planner_mjs_6a71b686__ from "./agents/planner.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__agents_validator_mjs_798ee0c2__ from "./agents/validator.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__prompts_navigator_mjs_2ca2fbfe__ from "./prompts/navigator.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__prompts_planner_mjs_fe4d08f5__ from "./prompts/planner.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__prompts_validator_mjs_406c2d76__ from "./prompts/validator.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__utils_mjs_2b03add0__ from "../utils.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__messages_service_mjs_8859273a__ from "./messages/service.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__actions_builder_mjs_9ce6f433__ from "./actions/builder.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__event_manager_mjs_2687dd84__ from "./event/manager.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__ from "./event/types.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__agents_errors_mjs_c8c839f5__ from "./agents/errors.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
const logger = (0, __WEBPACK_EXTERNAL_MODULE__utils_mjs_2b03add0__.createLogger)('Executor');
class Executor {
    subscribeExecutionEvents(callback) {
        this.context.eventManager.subscribe(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.EventType.EXECUTION, callback);
    }
    clearExecutionEvents() {
        this.context.eventManager.clearSubscribers(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.EventType.EXECUTION);
    }
    addFollowUpTask(task) {
        this.tasks.push(task);
        this.context.messageManager.addNewTask(task);
        this.validatorPrompt.addFollowUpTask(task);
        this.context.actionResults = this.context.actionResults.filter((result)=>result.includeInMemory);
    }
    async execute() {
        logger.info(`🚀 Executing task: ${this.tasks[this.tasks.length - 1]}`);
        const context = this.context;
        context.nSteps = 0;
        const allowedMaxSteps = this.context.options.maxSteps;
        const browserState = await this.context.browserContext.getState();
        try {
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.Actors.SYSTEM, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.ExecutionState.TASK_START, this.context.taskId, browserState);
            let done = false;
            let step = 0;
            let validatorFailed = false;
            for(step = 0; step < allowedMaxSteps; step++){
                context.stepInfo = {
                    stepNumber: context.nSteps,
                    maxSteps: context.options.maxSteps
                };
                logger.info(`🔄 Step ${step + 1} / ${allowedMaxSteps}`);
                if (await this.shouldStop()) break;
                if (this.planner && (context.nSteps % context.options.planningInterval === 0 || validatorFailed)) {
                    validatorFailed = false;
                    if (this.tasks.length > 1 || step > 0) await this.navigator.addStateMessageToMemory();
                    const planOutput = await this.planner.execute();
                    if (planOutput.result) {
                        logger.info(`🔄 Planner output: ${JSON.stringify(planOutput.result, null, 2)}`);
                        this.context.messageManager.addPlan(JSON.stringify(planOutput.result), this.context.messageManager.length() - 1);
                        if (planOutput.result.done) {
                            done = true;
                            this.validator.setPlan(planOutput.result.next_steps);
                        } else {
                            this.validator.setPlan(null);
                            done = false;
                        }
                        if (!planOutput.result.web_task && planOutput.result.done) break;
                    }
                }
                if (!done) done = await this.navigate();
                if (done && this.context.options.validateOutput && !this.context.stopped && !this.context.paused) {
                    var _validatorOutput_result;
                    const validatorOutput = await this.validator.execute();
                    if (null === (_validatorOutput_result = validatorOutput.result) || void 0 === _validatorOutput_result ? void 0 : _validatorOutput_result.is_valid) {
                        logger.info('✅ Task completed successfully');
                        break;
                    }
                    validatorFailed = true;
                }
            }
            if (done) this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.Actors.SYSTEM, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.ExecutionState.TASK_OK, this.context.taskId, browserState);
            else if (step >= allowedMaxSteps) {
                logger.info('❌ Task failed: Max steps reached');
                this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.Actors.SYSTEM, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.ExecutionState.TASK_FAIL, 'Task failed: Max steps reached', browserState);
            } else if (this.context.stopped) this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.Actors.SYSTEM, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.ExecutionState.TASK_CANCEL, 'Task cancelled', browserState);
            else this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.Actors.SYSTEM, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.ExecutionState.TASK_PAUSE, 'Task paused', browserState);
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.Actors.SYSTEM, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_55097f94__.ExecutionState.TASK_FAIL, `Task failed: ${errorMessage}`, browserState);
        }
    }
    async navigate() {
        const context = this.context;
        try {
            var _navOutput_result;
            if (context.paused || context.stopped) return false;
            const navOutput = await this.navigator.execute();
            if (context.paused || context.stopped) return false;
            context.nSteps++;
            if (navOutput.error) throw new Error(navOutput.error);
            context.consecutiveFailures = 0;
            if (null === (_navOutput_result = navOutput.result) || void 0 === _navOutput_result ? void 0 : _navOutput_result.done) return true;
        } catch (error) {
            if (error instanceof __WEBPACK_EXTERNAL_MODULE__agents_errors_mjs_c8c839f5__.ChatModelAuthError) throw error;
            context.consecutiveFailures++;
            logger.error(`Failed to execute step: ${error}`);
            if (context.consecutiveFailures >= context.options.maxFailures) throw new Error('Max failures reached');
        }
        return false;
    }
    async shouldStop() {
        if (this.context.stopped) {
            logger.info('Agent stopped');
            return true;
        }
        while(this.context.paused){
            await new Promise((resolve)=>setTimeout(resolve, 200));
            if (this.context.stopped) return true;
        }
        if (this.context.consecutiveFailures >= this.context.options.maxFailures) {
            logger.error(`Stopping due to ${this.context.options.maxFailures} consecutive failures`);
            return true;
        }
        return false;
    }
    async cancel() {
        this.context.stop();
    }
    async resume() {
        this.context.resume();
    }
    async pause() {
        this.context.pause();
    }
    async cleanup() {
        try {
            await this.context.browserContext.cleanup();
        } catch (error) {
            logger.error(`Failed to cleanup browser context: ${error}`);
        }
    }
    async getCurrentTaskId() {
        return this.context.taskId;
    }
    constructor(task, taskId, browserContext, navigatorLLM, extraArgs){
        _define_property(this, "navigator", void 0);
        _define_property(this, "planner", void 0);
        _define_property(this, "validator", void 0);
        _define_property(this, "context", void 0);
        _define_property(this, "plannerPrompt", void 0);
        _define_property(this, "navigatorPrompt", void 0);
        _define_property(this, "validatorPrompt", void 0);
        _define_property(this, "tasks", []);
        const messageManager = new __WEBPACK_EXTERNAL_MODULE__messages_service_mjs_8859273a__["default"]({});
        const plannerLLM = (null == extraArgs ? void 0 : extraArgs.plannerLLM) ?? navigatorLLM;
        const validatorLLM = (null == extraArgs ? void 0 : extraArgs.validatorLLM) ?? navigatorLLM;
        const extractorLLM = (null == extraArgs ? void 0 : extraArgs.extractorLLM) ?? navigatorLLM;
        const eventManager = new __WEBPACK_EXTERNAL_MODULE__event_manager_mjs_2687dd84__.EventManager();
        const context = new __WEBPACK_EXTERNAL_MODULE__types_mjs_4ad50757__.AgentContext(taskId, browserContext, messageManager, eventManager, (null == extraArgs ? void 0 : extraArgs.agentOptions) ?? {});
        this.tasks.push(task);
        this.navigatorPrompt = new __WEBPACK_EXTERNAL_MODULE__prompts_navigator_mjs_2ca2fbfe__.NavigatorPrompt(context.options.maxActionsPerStep);
        this.plannerPrompt = new __WEBPACK_EXTERNAL_MODULE__prompts_planner_mjs_fe4d08f5__.PlannerPrompt();
        this.validatorPrompt = new __WEBPACK_EXTERNAL_MODULE__prompts_validator_mjs_406c2d76__.ValidatorPrompt(task);
        const actionBuilder = new __WEBPACK_EXTERNAL_MODULE__actions_builder_mjs_9ce6f433__.ActionBuilder(context, extractorLLM);
        const navigatorActionRegistry = new __WEBPACK_EXTERNAL_MODULE__agents_navigator_mjs_a38d407b__.NavigatorActionRegistry(actionBuilder.buildDefaultActions());
        this.navigator = new __WEBPACK_EXTERNAL_MODULE__agents_navigator_mjs_a38d407b__.NavigatorAgent(navigatorActionRegistry, {
            chatLLM: navigatorLLM,
            context: context,
            prompt: this.navigatorPrompt
        });
        this.planner = new __WEBPACK_EXTERNAL_MODULE__agents_planner_mjs_6a71b686__.PlannerAgent({
            chatLLM: plannerLLM,
            context: context,
            prompt: this.plannerPrompt
        });
        this.validator = new __WEBPACK_EXTERNAL_MODULE__agents_validator_mjs_798ee0c2__.ValidatorAgent({
            chatLLM: validatorLLM,
            context: context,
            prompt: this.validatorPrompt
        });
        this.context = context;
        this.context.messageManager.initTaskMessages(this.navigatorPrompt.getSystemMessage(), task);
    }
}
export { Executor };

//# sourceMappingURL=executor.mjs.map