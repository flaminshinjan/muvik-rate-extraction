/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    EventManager: ()=>EventManager
});
const external_utils_js_namespaceObject = require("../../utils.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
const logger = (0, external_utils_js_namespaceObject.createLogger)('event-manager');
class EventManager {
    subscribe(eventType, callback) {
        if (!this._subscribers.has(eventType)) this._subscribers.set(eventType, []);
        const callbacks = this._subscribers.get(eventType);
        if (callbacks && !callbacks.includes(callback)) callbacks.push(callback);
    }
    unsubscribe(eventType, callback) {
        if (this._subscribers.has(eventType)) {
            const callbacks = this._subscribers.get(eventType);
            if (callbacks) this._subscribers.set(eventType, callbacks.filter((cb)=>cb !== callback));
        }
    }
    clearSubscribers(eventType) {
        if (this._subscribers.has(eventType)) this._subscribers.set(eventType, []);
    }
    async emit(event) {
        const callbacks = this._subscribers.get(event.type);
        if (callbacks) try {
            await Promise.all(callbacks.map(async (callback)=>await callback(event)));
        } catch (error) {
            logger.error('Error executing event callbacks:', error);
        }
    }
    constructor(){
        _define_property(this, "_subscribers", void 0);
        this._subscribers = new Map();
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=manager.js.map