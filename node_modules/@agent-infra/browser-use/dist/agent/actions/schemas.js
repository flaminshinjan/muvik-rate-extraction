/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    scrollUpActionSchema: ()=>scrollUpActionSchema,
    getDropdownOptionsActionSchema: ()=>getDropdownOptionsActionSchema,
    openTabActionSchema: ()=>openTabActionSchema,
    goToUrlActionSchema: ()=>goToUrlActionSchema,
    sendKeysActionSchema: ()=>sendKeysActionSchema,
    cacheContentActionSchema: ()=>cacheContentActionSchema,
    switchTabActionSchema: ()=>switchTabActionSchema,
    scrollDownActionSchema: ()=>scrollDownActionSchema,
    doneActionSchema: ()=>doneActionSchema,
    inputTextActionSchema: ()=>inputTextActionSchema,
    clickElementActionSchema: ()=>clickElementActionSchema,
    selectDropdownOptionActionSchema: ()=>selectDropdownOptionActionSchema,
    goBackActionSchema: ()=>goBackActionSchema,
    extractContentActionSchema: ()=>extractContentActionSchema,
    searchGoogleActionSchema: ()=>searchGoogleActionSchema,
    scrollToTextActionSchema: ()=>scrollToTextActionSchema
});
const external_zod_namespaceObject = require("zod");
const doneActionSchema = {
    name: 'done',
    description: 'Complete task',
    schema: external_zod_namespaceObject.z.object({
        text: external_zod_namespaceObject.z.string()
    })
};
const searchGoogleActionSchema = {
    name: 'search_google',
    description: 'Search Google in the current tab',
    schema: external_zod_namespaceObject.z.object({
        query: external_zod_namespaceObject.z.string()
    })
};
const goToUrlActionSchema = {
    name: 'go_to_url',
    description: 'Navigate to URL in the current tab',
    schema: external_zod_namespaceObject.z.object({
        url: external_zod_namespaceObject.z.string()
    })
};
const goBackActionSchema = {
    name: 'go_back',
    description: 'Go back to the previous page',
    schema: external_zod_namespaceObject.z.object({})
};
const clickElementActionSchema = {
    name: 'click_element',
    description: 'Click element',
    schema: external_zod_namespaceObject.z.object({
        desc: external_zod_namespaceObject.z.string().optional(),
        index: external_zod_namespaceObject.z.number(),
        xpath: external_zod_namespaceObject.z.string().optional()
    })
};
const inputTextActionSchema = {
    name: 'input_text',
    description: 'Input text into an interactive input element',
    schema: external_zod_namespaceObject.z.object({
        desc: external_zod_namespaceObject.z.string().optional(),
        index: external_zod_namespaceObject.z.number(),
        text: external_zod_namespaceObject.z.string(),
        xpath: external_zod_namespaceObject.z.string().optional()
    })
};
const switchTabActionSchema = {
    name: 'switch_tab',
    description: 'Switch to tab by id',
    schema: external_zod_namespaceObject.z.object({
        tab_id: external_zod_namespaceObject.z.number()
    })
};
const openTabActionSchema = {
    name: 'open_tab',
    description: 'Open URL in new tab',
    schema: external_zod_namespaceObject.z.object({
        url: external_zod_namespaceObject.z.string()
    })
};
const extractContentActionSchema = {
    name: 'extract_content',
    description: "Extract page content to retrieve specific information from the page, e.g. all company names, a specifc description, all information about, links with companies in structured format or simply links",
    schema: external_zod_namespaceObject.z.object({
        goal: external_zod_namespaceObject.z.string()
    })
};
const cacheContentActionSchema = {
    name: 'cache_content',
    description: 'Cache the extracted content of the page',
    schema: external_zod_namespaceObject.z.object({
        content: external_zod_namespaceObject.z.string()
    })
};
const scrollDownActionSchema = {
    name: 'scroll_down',
    description: 'Scroll down the page by pixel amount - if no amount is specified, scroll down one page',
    schema: external_zod_namespaceObject.z.object({
        desc: external_zod_namespaceObject.z.string().optional(),
        amount: external_zod_namespaceObject.z.number().optional()
    })
};
const scrollUpActionSchema = {
    name: 'scroll_up',
    description: 'Scroll up the page by pixel amount - if no amount is specified, scroll up one page',
    schema: external_zod_namespaceObject.z.object({
        desc: external_zod_namespaceObject.z.string().optional(),
        amount: external_zod_namespaceObject.z.number().optional()
    })
};
const sendKeysActionSchema = {
    name: 'send_keys',
    description: 'Send strings of special keys like Backspace, Insert, PageDown, Delete, Enter. Shortcuts such as `Control+o`, `Control+Shift+T` are supported as well. This gets used in keyboard press. Be aware of different operating systems and their shortcuts',
    schema: external_zod_namespaceObject.z.object({
        desc: external_zod_namespaceObject.z.string().optional(),
        keys: external_zod_namespaceObject.z.string()
    })
};
const scrollToTextActionSchema = {
    name: 'scroll_to_text',
    description: 'If you dont find something which you want to interact with, scroll to it',
    schema: external_zod_namespaceObject.z.object({
        desc: external_zod_namespaceObject.z.string().optional(),
        text: external_zod_namespaceObject.z.string()
    })
};
const getDropdownOptionsActionSchema = {
    name: 'get_dropdown_options',
    description: 'Get all options from a native dropdown',
    schema: external_zod_namespaceObject.z.object({
        index: external_zod_namespaceObject.z.number()
    })
};
const selectDropdownOptionActionSchema = {
    name: 'select_dropdown_option',
    description: 'Select dropdown option for interactive element index by the text of the option you want to select',
    schema: external_zod_namespaceObject.z.object({
        index: external_zod_namespaceObject.z.number(),
        text: external_zod_namespaceObject.z.string()
    })
};
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=schemas.js.map