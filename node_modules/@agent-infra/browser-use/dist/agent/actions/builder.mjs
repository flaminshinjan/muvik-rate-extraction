/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__ from "../types.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__ from "./schemas.mjs";
import * as __WEBPACK_EXTERNAL_MODULE_zod__ from "zod";
import * as __WEBPACK_EXTERNAL_MODULE__utils_mjs_e798cd09__ from "../../utils.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__langchain_core_prompts_8f202e00__ from "@langchain/core/prompts";
import * as __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__ from "../event/types.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
const logger = (0, __WEBPACK_EXTERNAL_MODULE__utils_mjs_e798cd09__.createLogger)('Action');
class InvalidInputError extends Error {
    constructor(message){
        super(message);
        this.name = 'InvalidInputError';
    }
}
class Action {
    async call(input) {
        const schema = this.schema.schema;
        const isEmptySchema = schema instanceof __WEBPACK_EXTERNAL_MODULE_zod__.z.ZodObject && 0 === Object.keys(schema.shape || {}).length;
        if (isEmptySchema) return await this.handler({});
        const parsedArgs = this.schema.schema.safeParse(input);
        if (!parsedArgs.success) {
            const errorMessage = parsedArgs.error.message;
            throw new InvalidInputError(errorMessage);
        }
        return await this.handler(parsedArgs.data);
    }
    name() {
        return this.schema.name;
    }
    prompt() {
        const schemaShape = this.schema.schema.shape || {};
        const schemaProperties = Object.entries(schemaShape).map(([key, value])=>{
            const zodValue = value;
            return `'${key}': {'type': '${zodValue.description}', ${zodValue.isOptional() ? "'optional': true" : "'required': true"}}`;
        });
        const schemaStr = schemaProperties.length > 0 ? `{${this.name()}: {${schemaProperties.join(', ')}}}` : `{${this.name()}: {}}`;
        return `${this.schema.description}:\n${schemaStr}`;
    }
    constructor(handler, schema){
        _define_property(this, "handler", void 0);
        _define_property(this, "schema", void 0);
        this.handler = handler;
        this.schema = schema;
    }
}
function buildDynamicActionSchema(actions) {
    let schema = __WEBPACK_EXTERNAL_MODULE_zod__.z.object({});
    for (const action of actions){
        const actionSchema = action.schema.schema.nullable();
        schema = schema.extend({
            [action.name()]: actionSchema
        });
    }
    return schema.partial().nullable();
}
class ActionBuilder {
    buildDefaultActions() {
        const actions = [];
        const done = new Action(async (input)=>{
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.doneActionSchema.name);
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, input.text);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                isDone: true,
                extractedContent: input.text
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.doneActionSchema);
        actions.push(done);
        const searchGoogle = new Action(async (input)=>{
            const msg = `Searching for "${input.query}" in Google`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, msg);
            const page = await this.context.browserContext.getCurrentPage();
            await page.navigateTo(`https://www.google.com/search?q=${input.query}`);
            const msg2 = `Searched for "${input.query}" in Google`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg2);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg2,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.searchGoogleActionSchema);
        actions.push(searchGoogle);
        const goToUrl = new Action(async (input)=>{
            const msg = `Navigating to ${input.url}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, msg);
            await this.context.browserContext.navigateTo(input.url);
            const msg2 = `Navigated to ${input.url}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg2);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg2,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.goToUrlActionSchema);
        actions.push(goToUrl);
        const goBack = new Action(async (_input = {})=>{
            const msg = 'Navigating back';
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, msg);
            const page = await this.context.browserContext.getCurrentPage();
            await page.goBack();
            const msg2 = 'Navigated back';
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg2);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg2,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.goBackActionSchema);
        actions.push(goBack);
        const clickElement = new Action(async (input)=>{
            const todo = input.desc || `Click element with index ${input.index}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, todo);
            const page = await this.context.browserContext.getCurrentPage();
            const state = await page.getState();
            const elementNode = null == state ? void 0 : state.selectorMap.get(input.index);
            if (!elementNode) throw new Error(`Element with index ${input.index} does not exist - retry or use alternative actions`);
            if (await page.isFileUploader(elementNode)) {
                const msg = `Index ${input.index} - has an element which opens file upload dialog. To upload files please use a specific function to upload files`;
                logger.info(msg);
                return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                    extractedContent: msg,
                    includeInMemory: true
                });
            }
            try {
                console.log('elementNode', elementNode);
                await page.clickElementNode(this.context.options.useVision, elementNode);
                const msg = `Clicked button with index ${input.index}: ${elementNode.getAllTextTillNextClickableElement(2)}`;
                logger.info(msg);
                this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
                return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                    extractedContent: msg,
                    includeInMemory: true
                });
            } catch (error) {
                const msg = `Element no longer available with index ${input.index} - most likely the page changed`;
                this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_FAIL, msg);
                return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                    error: error instanceof Error ? error.message : String(error)
                });
            }
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.clickElementActionSchema);
        actions.push(clickElement);
        const inputText = new Action(async (input)=>{
            const todo = input.desc || `Input text into index ${input.index}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, todo);
            const page = await this.context.browserContext.getCurrentPage();
            const state = await page.getState();
            const elementNode = null == state ? void 0 : state.selectorMap.get(input.index);
            if (!elementNode) throw new Error(`Element with index ${input.index} does not exist - retry or use alternative actions`);
            await page.inputTextElementNode(this.context.options.useVision, elementNode, input.text);
            const msg = `Input ${input.text} into index ${input.index}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.inputTextActionSchema);
        actions.push(inputText);
        const switchTab = new Action(async (input)=>{
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, `Switching to tab ${input.tab_id}`);
            await this.context.browserContext.switchTab(input.tab_id);
            const msg = `Switched to tab ${input.tab_id}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.switchTabActionSchema);
        actions.push(switchTab);
        const openTab = new Action(async (input)=>{
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, `Opening ${input.url} in new tab`);
            await this.context.browserContext.openTab(input.url);
            const msg = `Opened ${input.url} in new tab`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.openTabActionSchema);
        actions.push(openTab);
        const extractContent = new Action(async (input)=>{
            const goal = input.goal;
            const page = await this.context.browserContext.getCurrentPage();
            const content = await page.getReadabilityContent();
            const promptTemplate = __WEBPACK_EXTERNAL_MODULE__langchain_core_prompts_8f202e00__.PromptTemplate.fromTemplate('Your task is to extract the content of the page. You will be given a page and a goal and you should extract all relevant information around this goal from the page. If the goal is vague, summarize the page. Respond in json format. Extraction goal: {goal}, Page: {page}');
            const prompt = await promptTemplate.invoke({
                goal,
                page: null == content ? void 0 : content.content
            });
            try {
                const output = await this.extractorLLM.invoke(prompt);
                const msg = `📄  Extracted from page\n: ${output.content}\n`;
                return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                    extractedContent: msg,
                    includeInMemory: true
                });
            } catch (error) {
                logger.error(`Error extracting content: ${error instanceof Error ? error.message : String(error)}`);
                const msg = 'Failed to extract content from page, you need to extract content from the current state of the page and store it in the memory. Then scroll down if you still need more information.';
                return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                    extractedContent: msg,
                    includeInMemory: true
                });
            }
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.extractContentActionSchema);
        actions.push(extractContent);
        const cacheContent = new Action(async (input)=>{
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.cacheContentActionSchema.name);
            const msg = `Cached findings: ${input.content}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.cacheContentActionSchema);
        actions.push(cacheContent);
        const scrollDown = new Action(async (input)=>{
            const todo = input.desc || 'Scroll down the page';
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, todo);
            const page = await this.context.browserContext.getCurrentPage();
            await page.scrollDown(input.amount);
            const amount = void 0 !== input.amount ? `${input.amount} pixels` : 'one page';
            const msg = `Scrolled down the page by ${amount}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.scrollDownActionSchema);
        actions.push(scrollDown);
        const scrollUp = new Action(async (input)=>{
            const todo = input.desc || 'Scroll up the page';
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, todo);
            const page = await this.context.browserContext.getCurrentPage();
            await page.scrollUp(input.amount);
            const amount = void 0 !== input.amount ? `${input.amount} pixels` : 'one page';
            const msg = `Scrolled up the page by ${amount}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.scrollUpActionSchema);
        actions.push(scrollUp);
        const sendKeys = new Action(async (input)=>{
            const todo = input.desc || `Send keys: ${input.keys}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, todo);
            const page = await this.context.browserContext.getCurrentPage();
            await page.sendKeys(input.keys);
            const msg = `Sent keys: ${input.keys}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
            return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                extractedContent: msg,
                includeInMemory: true
            });
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.sendKeysActionSchema);
        actions.push(sendKeys);
        const scrollToText = new Action(async (input)=>{
            const todo = input.desc || `Scroll to text: ${input.text}`;
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_START, todo);
            const page = await this.context.browserContext.getCurrentPage();
            try {
                const scrolled = await page.scrollToText(input.text);
                const msg = scrolled ? `Scrolled to text: ${input.text}` : `Text '${input.text}' not found or not visible on page`;
                this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_OK, msg);
                return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                    extractedContent: msg,
                    includeInMemory: true
                });
            } catch (error) {
                const msg = `Failed to scroll to text: ${error instanceof Error ? error.message : String(error)}`;
                this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.NAVIGATOR, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.ACT_FAIL, msg);
                return new __WEBPACK_EXTERNAL_MODULE__types_mjs_686c9f1a__.ActionResult({
                    error: msg,
                    includeInMemory: true
                });
            }
        }, __WEBPACK_EXTERNAL_MODULE__schemas_mjs_ca154588__.scrollToTextActionSchema);
        actions.push(scrollToText);
        return actions;
    }
    constructor(context, extractorLLM){
        _define_property(this, "context", void 0);
        _define_property(this, "extractorLLM", void 0);
        this.context = context;
        this.extractorLLM = extractorLLM;
    }
}
export { Action, ActionBuilder, InvalidInputError, buildDynamicActionSchema };

//# sourceMappingURL=builder.mjs.map