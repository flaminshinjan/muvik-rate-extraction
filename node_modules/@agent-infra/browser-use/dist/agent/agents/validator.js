/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    ValidatorAgent: ()=>ValidatorAgent,
    validatorOutputSchema: ()=>validatorOutputSchema
});
const external_base_js_namespaceObject = require("./base.js");
const external_zod_namespaceObject = require("zod");
const external_types_js_namespaceObject = require("../types.js");
const types_js_namespaceObject = require("../event/types.js");
const messages_namespaceObject = require("@langchain/core/messages");
const external_utils_js_namespaceObject = require("../../utils.js");
const external_errors_js_namespaceObject = require("./errors.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
const logger = (0, external_utils_js_namespaceObject.createLogger)('ValidatorAgent');
const validatorOutputSchema = external_zod_namespaceObject.z.object({
    is_valid: external_zod_namespaceObject.z.boolean(),
    reason: external_zod_namespaceObject.z.string(),
    answer: external_zod_namespaceObject.z.string()
});
class ValidatorAgent extends external_base_js_namespaceObject.BaseAgent {
    setPlan(plan) {
        this.plan = plan;
    }
    async execute() {
        try {
            this.context.emitEvent(types_js_namespaceObject.Actors.VALIDATOR, types_js_namespaceObject.ExecutionState.STEP_START, 'Validating...');
            let stateMessage = await this.prompt.getUserMessage(this.context);
            if (this.plan) {
                const mergedMessage = new messages_namespaceObject.HumanMessage(`${stateMessage.content}\n\nThe current plan is: \n${this.plan}`);
                stateMessage = mergedMessage;
            }
            const systemMessage = this.prompt.getSystemMessage();
            const inputMessages = [
                systemMessage,
                stateMessage
            ];
            const modelOutput = await this.invoke(inputMessages);
            if (!modelOutput) throw new Error('Failed to validate task result');
            logger.info('validator output', JSON.stringify(modelOutput, null, 2));
            if (modelOutput.is_valid) this.context.emitEvent(types_js_namespaceObject.Actors.VALIDATOR, types_js_namespaceObject.ExecutionState.STEP_OK, modelOutput.answer);
            else {
                const msg = `The answer is not yet correct. ${modelOutput.reason}.`;
                this.context.emitEvent(types_js_namespaceObject.Actors.VALIDATOR, types_js_namespaceObject.ExecutionState.STEP_FAIL, msg);
                this.context.actionResults = [
                    new external_types_js_namespaceObject.ActionResult({
                        extractedContent: msg,
                        includeInMemory: true
                    })
                ];
            }
            return {
                id: this.id,
                result: modelOutput
            };
        } catch (error) {
            if ((0, external_utils_js_namespaceObject.isAuthenticationError)(error)) throw new external_errors_js_namespaceObject.ChatModelAuthError('Validator API Authentication failed. Please verify your API key', error);
            const errorMessage = error instanceof Error ? error.message : String(error);
            logger.error(`Validation failed: ${errorMessage}`);
            this.context.emitEvent(types_js_namespaceObject.Actors.VALIDATOR, types_js_namespaceObject.ExecutionState.STEP_FAIL, `Validation failed: ${errorMessage}`);
            return {
                id: this.id,
                error: `Validation failed: ${errorMessage}`
            };
        }
    }
    constructor(options, extraOptions){
        super(validatorOutputSchema, options, {
            ...extraOptions,
            id: 'validator'
        }), _define_property(this, "plan", null);
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=validator.js.map