{"version":3,"file":"agent/agents/validator.mjs","sources":["webpack://@agent-infra/browser-use/./src/agent/agents/validator.ts"],"sourcesContent":["/**\n * The following code is modified based on\n * https://github.com/nanobrowser/nanobrowser/blob/master/chrome-extension/src/background/agent/agents/validator.ts\n *\n * Apache-2.0 License\n * Copyright (c) 2024 alexchenzl\n * https://github.com/nanobrowser/nanobrowser/blob/master/LICENSE\n */\nimport {\n  BaseAgent,\n  type BaseAgentOptions,\n  type ExtraAgentOptions,\n} from './base';\nimport { z } from 'zod';\nimport { ActionResult, type AgentOutput } from '../types';\nimport { Actors, ExecutionState } from '../event/types';\nimport { HumanMessage } from '@langchain/core/messages';\nimport { isAuthenticationError, createLogger } from '../../utils';\nimport { ChatModelAuthError } from './errors';\nconst logger = createLogger('ValidatorAgent');\n\n// Define Zod schema for validator output\nexport const validatorOutputSchema = z.object({\n  is_valid: z.boolean(), // indicates if the output is correct\n  reason: z.string(), // explains why it is valid or not\n  answer: z.string(), // the final answer to the task if it is valid\n});\n\nexport type ValidatorOutput = z.infer<typeof validatorOutputSchema>;\n\nexport class ValidatorAgent extends BaseAgent<\n  typeof validatorOutputSchema,\n  ValidatorOutput\n> {\n  // sometimes we need to validate the output against both the current browser state and the plan\n  private plan: string | null = null;\n  constructor(\n    options: BaseAgentOptions,\n    extraOptions?: Partial<ExtraAgentOptions>,\n  ) {\n    super(validatorOutputSchema, options, { ...extraOptions, id: 'validator' });\n  }\n\n  /**\n   * Set the plan for the validator agent\n   * @param plan - The plan to set\n   */\n  setPlan(plan: string | null): void {\n    this.plan = plan;\n  }\n\n  /**\n   * Executes the validator agent\n   * @returns AgentOutput<ValidatorOutput>\n   */\n  async execute(): Promise<AgentOutput<ValidatorOutput>> {\n    try {\n      this.context.emitEvent(\n        Actors.VALIDATOR,\n        ExecutionState.STEP_START,\n        'Validating...',\n      );\n\n      let stateMessage = await this.prompt.getUserMessage(this.context);\n      if (this.plan) {\n        // merge the plan and the state message\n        const mergedMessage = new HumanMessage(\n          `${stateMessage.content}\\n\\nThe current plan is: \\n${this.plan}`,\n        );\n        stateMessage = mergedMessage;\n      }\n      const systemMessage = this.prompt.getSystemMessage();\n      const inputMessages = [systemMessage, stateMessage];\n\n      const modelOutput = await this.invoke(inputMessages);\n      if (!modelOutput) {\n        throw new Error('Failed to validate task result');\n      }\n\n      logger.info('validator output', JSON.stringify(modelOutput, null, 2));\n\n      if (!modelOutput.is_valid) {\n        // need to update the action results so that other agents can see the error\n        const msg = `The answer is not yet correct. ${modelOutput.reason}.`;\n        this.context.emitEvent(Actors.VALIDATOR, ExecutionState.STEP_FAIL, msg);\n        this.context.actionResults = [\n          new ActionResult({ extractedContent: msg, includeInMemory: true }),\n        ];\n      } else {\n        this.context.emitEvent(\n          Actors.VALIDATOR,\n          ExecutionState.STEP_OK,\n          modelOutput.answer,\n        );\n      }\n\n      return {\n        id: this.id,\n        result: modelOutput,\n      };\n    } catch (error) {\n      // Check if this is an authentication error\n      if (isAuthenticationError(error)) {\n        throw new ChatModelAuthError(\n          'Validator API Authentication failed. Please verify your API key',\n          error,\n        );\n      }\n\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      logger.error(`Validation failed: ${errorMessage}`);\n      this.context.emitEvent(\n        Actors.VALIDATOR,\n        ExecutionState.STEP_FAIL,\n        `Validation failed: ${errorMessage}`,\n      );\n      return {\n        id: this.id,\n        error: `Validation failed: ${errorMessage}`,\n      };\n    }\n  }\n}\n"],"names":["logger","createLogger","validatorOutputSchema","z","ValidatorAgent","BaseAgent","plan","Actors","ExecutionState","stateMessage","mergedMessage","HumanMessage","systemMessage","inputMessages","modelOutput","Error","JSON","msg","ActionResult","error","isAuthenticationError","ChatModelAuthError","errorMessage","String","options","extraOptions"],"mappings":";;;;;;;;;;;AAOC;;;;;;;;;;AAYD,MAAMA,SAASC,AAAAA,IAAAA,gDAAAA,YAAAA,AAAAA,EAAa;AAGrB,MAAMC,wBAAwBC,gCAAAA,CAAAA,CAAAA,MAAQ,CAAC;IAC5C,UAAUA,gCAAAA,CAAAA,CAAAA,OAAS;IACnB,QAAQA,gCAAAA,CAAAA,CAAAA,MAAQ;IAChB,QAAQA,gCAAAA,CAAAA,CAAAA,MAAQ;AAClB;AAIO,MAAMC,uBAAuBC,+CAAAA,SAASA;IAiB3C,QAAQC,IAAmB,EAAQ;QACjC,IAAI,CAAC,IAAI,GAAGA;IACd;IAMA,MAAM,UAAiD;QACrD,IAAI;YACF,IAAI,CAAC,OAAO,CAAC,SAAS,CACpBC,sDAAAA,MAAAA,CAAAA,SAAgB,EAChBC,sDAAAA,cAAAA,CAAAA,UAAyB,EACzB;YAGF,IAAIC,eAAe,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO;YAChE,IAAI,IAAI,CAAC,IAAI,EAAE;gBAEb,MAAMC,gBAAgB,IAAIC,8DAAAA,YAAYA,CACpC,GAAGF,aAAa,OAAO,CAAC,2BAA2B,EAAE,IAAI,CAAC,IAAI,EAAE;gBAElEA,eAAeC;YACjB;YACA,MAAME,gBAAgB,IAAI,CAAC,MAAM,CAAC,gBAAgB;YAClD,MAAMC,gBAAgB;gBAACD;gBAAeH;aAAa;YAEnD,MAAMK,cAAc,MAAM,IAAI,CAAC,MAAM,CAACD;YACtC,IAAI,CAACC,aACH,MAAM,IAAIC,MAAM;YAGlBf,OAAO,IAAI,CAAC,oBAAoBgB,KAAK,SAAS,CAACF,aAAa,MAAM;YAElE,IAAKA,YAAY,QAAQ,EAQvB,IAAI,CAAC,OAAO,CAAC,SAAS,CACpBP,sDAAAA,MAAAA,CAAAA,SAAgB,EAChBC,sDAAAA,cAAAA,CAAAA,OAAsB,EACtBM,YAAY,MAAM;iBAXK;gBAEzB,MAAMG,MAAM,CAAC,+BAA+B,EAAEH,YAAY,MAAM,CAAC,CAAC,CAAC;gBACnE,IAAI,CAAC,OAAO,CAAC,SAAS,CAACP,sDAAAA,MAAAA,CAAAA,SAAgB,EAAEC,sDAAAA,cAAAA,CAAAA,SAAwB,EAAES;gBACnE,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG;oBAC3B,IAAIC,gDAAAA,YAAYA,CAAC;wBAAE,kBAAkBD;wBAAK,iBAAiB;oBAAK;iBACjE;YACH;YAQA,OAAO;gBACL,IAAI,IAAI,CAAC,EAAE;gBACX,QAAQH;YACV;QACF,EAAE,OAAOK,OAAO;YAEd,IAAIC,AAAAA,IAAAA,gDAAAA,qBAAAA,AAAAA,EAAsBD,QACxB,MAAM,IAAIE,iDAAAA,kBAAkBA,CAC1B,mEACAF;YAIJ,MAAMG,eACJH,iBAAiBJ,QAAQI,MAAM,OAAO,GAAGI,OAAOJ;YAClDnB,OAAO,KAAK,CAAC,CAAC,mBAAmB,EAAEsB,cAAc;YACjD,IAAI,CAAC,OAAO,CAAC,SAAS,CACpBf,sDAAAA,MAAAA,CAAAA,SAAgB,EAChBC,sDAAAA,cAAAA,CAAAA,SAAwB,EACxB,CAAC,mBAAmB,EAAEc,cAAc;YAEtC,OAAO;gBACL,IAAI,IAAI,CAAC,EAAE;gBACX,OAAO,CAAC,mBAAmB,EAAEA,cAAc;YAC7C;QACF;IACF;IAtFA,YACEE,OAAyB,EACzBC,YAAyC,CACzC;QACA,KAAK,CAACvB,uBAAuBsB,SAAS;YAAE,GAAGC,YAAY;YAAE,IAAI;QAAY,IAL3E,uBAAQ,QAAsB;IAM9B;AAkFF"}