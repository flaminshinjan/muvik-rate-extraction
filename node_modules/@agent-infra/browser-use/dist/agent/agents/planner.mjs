/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__base_mjs_f55655df__ from "./base.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__utils_mjs_e798cd09__ from "../../utils.mjs";
import * as __WEBPACK_EXTERNAL_MODULE_zod__ from "zod";
import * as __WEBPACK_EXTERNAL_MODULE__langchain_core_messages_57fab301__ from "@langchain/core/messages";
import * as __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__ from "../event/types.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__errors_mjs_a5f03675__ from "./errors.mjs";
(0, __WEBPACK_EXTERNAL_MODULE__utils_mjs_e798cd09__.createLogger)('PlannerAgent');
const plannerOutputSchema = __WEBPACK_EXTERNAL_MODULE_zod__.z.object({
    observation: __WEBPACK_EXTERNAL_MODULE_zod__.z.string(),
    challenges: __WEBPACK_EXTERNAL_MODULE_zod__.z.string(),
    done: __WEBPACK_EXTERNAL_MODULE_zod__.z.boolean(),
    next_steps: __WEBPACK_EXTERNAL_MODULE_zod__.z.string(),
    reasoning: __WEBPACK_EXTERNAL_MODULE_zod__.z.string(),
    web_task: __WEBPACK_EXTERNAL_MODULE_zod__.z.boolean()
});
class PlannerAgent extends __WEBPACK_EXTERNAL_MODULE__base_mjs_f55655df__.BaseAgent {
    async execute() {
        try {
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.PLANNER, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.STEP_START, 'Planning...');
            const messages = this.context.messageManager.getMessages();
            const plannerMessages = [
                this.prompt.getSystemMessage(),
                ...messages.slice(1)
            ];
            if (!this.context.options.useVisionForPlanner && this.context.options.useVision) {
                const lastStateMessage = plannerMessages[plannerMessages.length - 1];
                let newMsg = '';
                if (Array.isArray(lastStateMessage.content)) {
                    for (const msg of lastStateMessage.content)if ('text' === msg.type) newMsg += msg.text;
                } else newMsg = lastStateMessage.content;
                plannerMessages[plannerMessages.length - 1] = new __WEBPACK_EXTERNAL_MODULE__langchain_core_messages_57fab301__.HumanMessage(newMsg);
            }
            const modelOutput = await this.invoke(plannerMessages);
            if (!modelOutput) throw new Error('Failed to validate planner output');
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.PLANNER, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.STEP_OK, modelOutput.next_steps);
            return {
                id: this.id,
                result: modelOutput
            };
        } catch (error) {
            if ((0, __WEBPACK_EXTERNAL_MODULE__utils_mjs_e798cd09__.isAuthenticationError)(error)) throw new __WEBPACK_EXTERNAL_MODULE__errors_mjs_a5f03675__.ChatModelAuthError('Planner API Authentication failed. Please verify your API key', error);
            const errorMessage = error instanceof Error ? error.message : String(error);
            this.context.emitEvent(__WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.Actors.PLANNER, __WEBPACK_EXTERNAL_MODULE__event_types_mjs_5ce8fd1f__.ExecutionState.STEP_FAIL, `Planning failed: ${errorMessage}`);
            return {
                id: this.id,
                error: errorMessage
            };
        }
    }
    constructor(options, extraOptions){
        super(plannerOutputSchema, options, {
            ...extraOptions,
            id: 'planner'
        });
    }
}
export { PlannerAgent, plannerOutputSchema };

//# sourceMappingURL=planner.mjs.map