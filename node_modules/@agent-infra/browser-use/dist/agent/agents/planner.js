/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    PlannerAgent: ()=>PlannerAgent,
    plannerOutputSchema: ()=>plannerOutputSchema
});
const external_base_js_namespaceObject = require("./base.js");
const external_utils_js_namespaceObject = require("../../utils.js");
const external_zod_namespaceObject = require("zod");
const messages_namespaceObject = require("@langchain/core/messages");
const types_js_namespaceObject = require("../event/types.js");
const external_errors_js_namespaceObject = require("./errors.js");
(0, external_utils_js_namespaceObject.createLogger)('PlannerAgent');
const plannerOutputSchema = external_zod_namespaceObject.z.object({
    observation: external_zod_namespaceObject.z.string(),
    challenges: external_zod_namespaceObject.z.string(),
    done: external_zod_namespaceObject.z.boolean(),
    next_steps: external_zod_namespaceObject.z.string(),
    reasoning: external_zod_namespaceObject.z.string(),
    web_task: external_zod_namespaceObject.z.boolean()
});
class PlannerAgent extends external_base_js_namespaceObject.BaseAgent {
    async execute() {
        try {
            this.context.emitEvent(types_js_namespaceObject.Actors.PLANNER, types_js_namespaceObject.ExecutionState.STEP_START, 'Planning...');
            const messages = this.context.messageManager.getMessages();
            const plannerMessages = [
                this.prompt.getSystemMessage(),
                ...messages.slice(1)
            ];
            if (!this.context.options.useVisionForPlanner && this.context.options.useVision) {
                const lastStateMessage = plannerMessages[plannerMessages.length - 1];
                let newMsg = '';
                if (Array.isArray(lastStateMessage.content)) {
                    for (const msg of lastStateMessage.content)if ('text' === msg.type) newMsg += msg.text;
                } else newMsg = lastStateMessage.content;
                plannerMessages[plannerMessages.length - 1] = new messages_namespaceObject.HumanMessage(newMsg);
            }
            const modelOutput = await this.invoke(plannerMessages);
            if (!modelOutput) throw new Error('Failed to validate planner output');
            this.context.emitEvent(types_js_namespaceObject.Actors.PLANNER, types_js_namespaceObject.ExecutionState.STEP_OK, modelOutput.next_steps);
            return {
                id: this.id,
                result: modelOutput
            };
        } catch (error) {
            if ((0, external_utils_js_namespaceObject.isAuthenticationError)(error)) throw new external_errors_js_namespaceObject.ChatModelAuthError('Planner API Authentication failed. Please verify your API key', error);
            const errorMessage = error instanceof Error ? error.message : String(error);
            this.context.emitEvent(types_js_namespaceObject.Actors.PLANNER, types_js_namespaceObject.ExecutionState.STEP_FAIL, `Planning failed: ${errorMessage}`);
            return {
                id: this.id,
                error: errorMessage
            };
        }
    }
    constructor(options, extraOptions){
        super(plannerOutputSchema, options, {
            ...extraOptions,
            id: 'planner'
        });
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=planner.js.map