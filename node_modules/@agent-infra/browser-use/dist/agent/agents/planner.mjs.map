{"version":3,"file":"agent/agents/planner.mjs","sources":["webpack://@agent-infra/browser-use/./src/agent/agents/planner.ts"],"sourcesContent":["/**\n * The following code is modified based on\n * https://github.com/nanobrowser/nanobrowser/blob/master/chrome-extension/src/background/agent/agents/planner.ts\n *\n * Apache-2.0 License\n * Copyright (c) 2024 alexchenzl\n * https://github.com/nanobrowser/nanobrowser/blob/master/LICENSE\n */\nimport {\n  BaseAgent,\n  type BaseAgentOptions,\n  type ExtraAgentOptions,\n} from './base';\nimport { createLogger, isAuthenticationError } from '../../utils';\nimport { z } from 'zod';\nimport type { AgentOutput } from '../types';\nimport { HumanMessage } from '@langchain/core/messages';\nimport { Actors, ExecutionState } from '../event/types';\nimport { ChatModelAuthError } from './errors';\nconst logger = createLogger('PlannerAgent');\n\n// Define Zod schema for planner output\nexport const plannerOutputSchema = z.object({\n  observation: z.string(),\n  challenges: z.string(),\n  done: z.boolean(),\n  next_steps: z.string(),\n  reasoning: z.string(),\n  web_task: z.boolean(),\n});\n\nexport type PlannerOutput = z.infer<typeof plannerOutputSchema>;\n\nexport class PlannerAgent extends BaseAgent<\n  typeof plannerOutputSchema,\n  PlannerOutput\n> {\n  constructor(\n    options: BaseAgentOptions,\n    extraOptions?: Partial<ExtraAgentOptions>,\n  ) {\n    super(plannerOutputSchema, options, { ...extraOptions, id: 'planner' });\n  }\n\n  async execute(): Promise<AgentOutput<PlannerOutput>> {\n    try {\n      this.context.emitEvent(\n        Actors.PLANNER,\n        ExecutionState.STEP_START,\n        'Planning...',\n      );\n      // get all messages from the message manager, state message should be the last one\n      const messages = this.context.messageManager.getMessages();\n      // Use full message history except the first one\n      const plannerMessages = [\n        this.prompt.getSystemMessage(),\n        ...messages.slice(1),\n      ];\n\n      // Remove images from last message if vision is not enabled for planner but vision is enabled\n      if (\n        !this.context.options.useVisionForPlanner &&\n        this.context.options.useVision\n      ) {\n        const lastStateMessage = plannerMessages[plannerMessages.length - 1];\n        let newMsg = '';\n\n        if (Array.isArray(lastStateMessage.content)) {\n          for (const msg of lastStateMessage.content) {\n            if (msg.type === 'text') {\n              newMsg += msg.text;\n            }\n            // Skip image_url messages\n          }\n        } else {\n          newMsg = lastStateMessage.content;\n        }\n\n        plannerMessages[plannerMessages.length - 1] = new HumanMessage(newMsg);\n      }\n\n      const modelOutput = await this.invoke(plannerMessages);\n      if (!modelOutput) {\n        throw new Error('Failed to validate planner output');\n      }\n      this.context.emitEvent(\n        Actors.PLANNER,\n        ExecutionState.STEP_OK,\n        modelOutput.next_steps,\n      );\n\n      return {\n        id: this.id,\n        result: modelOutput,\n      };\n    } catch (error) {\n      // Check if this is an authentication error\n      if (isAuthenticationError(error)) {\n        throw new ChatModelAuthError(\n          'Planner API Authentication failed. Please verify your API key',\n          error,\n        );\n      }\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.context.emitEvent(\n        Actors.PLANNER,\n        ExecutionState.STEP_FAIL,\n        `Planning failed: ${errorMessage}`,\n      );\n      return {\n        id: this.id,\n        error: errorMessage,\n      };\n    }\n  }\n}\n"],"names":["createLogger","plannerOutputSchema","z","PlannerAgent","BaseAgent","Actors","ExecutionState","messages","plannerMessages","lastStateMessage","newMsg","Array","msg","HumanMessage","modelOutput","Error","error","isAuthenticationError","ChatModelAuthError","errorMessage","String","options","extraOptions"],"mappings":";;;;;;;;;;AAmBeA,IAAAA,gDAAAA,YAAAA,AAAAA,EAAa;AAGrB,MAAMC,sBAAsBC,gCAAAA,CAAAA,CAAAA,MAAQ,CAAC;IAC1C,aAAaA,gCAAAA,CAAAA,CAAAA,MAAQ;IACrB,YAAYA,gCAAAA,CAAAA,CAAAA,MAAQ;IACpB,MAAMA,gCAAAA,CAAAA,CAAAA,OAAS;IACf,YAAYA,gCAAAA,CAAAA,CAAAA,MAAQ;IACpB,WAAWA,gCAAAA,CAAAA,CAAAA,MAAQ;IACnB,UAAUA,gCAAAA,CAAAA,CAAAA,OAAS;AACrB;AAIO,MAAMC,qBAAqBC,+CAAAA,SAASA;IAWzC,MAAM,UAA+C;QACnD,IAAI;YACF,IAAI,CAAC,OAAO,CAAC,SAAS,CACpBC,sDAAAA,MAAAA,CAAAA,OAAc,EACdC,sDAAAA,cAAAA,CAAAA,UAAyB,EACzB;YAGF,MAAMC,WAAW,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW;YAExD,MAAMC,kBAAkB;gBACtB,IAAI,CAAC,MAAM,CAAC,gBAAgB;mBACzBD,SAAS,KAAK,CAAC;aACnB;YAGD,IACE,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,IACzC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,EAC9B;gBACA,MAAME,mBAAmBD,eAAe,CAACA,gBAAgB,MAAM,GAAG,EAAE;gBACpE,IAAIE,SAAS;gBAEb,IAAIC,MAAM,OAAO,CAACF,iBAAiB,OAAO,GACxC;oBAAA,KAAK,MAAMG,OAAOH,iBAAiB,OAAO,CACxC,IAAIG,AAAa,WAAbA,IAAI,IAAI,EACVF,UAAUE,IAAI,IAAI;gBAGtB,OAEAF,SAASD,iBAAiB,OAAO;gBAGnCD,eAAe,CAACA,gBAAgB,MAAM,GAAG,EAAE,GAAG,IAAIK,8DAAAA,YAAYA,CAACH;YACjE;YAEA,MAAMI,cAAc,MAAM,IAAI,CAAC,MAAM,CAACN;YACtC,IAAI,CAACM,aACH,MAAM,IAAIC,MAAM;YAElB,IAAI,CAAC,OAAO,CAAC,SAAS,CACpBV,sDAAAA,MAAAA,CAAAA,OAAc,EACdC,sDAAAA,cAAAA,CAAAA,OAAsB,EACtBQ,YAAY,UAAU;YAGxB,OAAO;gBACL,IAAI,IAAI,CAAC,EAAE;gBACX,QAAQA;YACV;QACF,EAAE,OAAOE,OAAO;YAEd,IAAIC,AAAAA,IAAAA,gDAAAA,qBAAAA,AAAAA,EAAsBD,QACxB,MAAM,IAAIE,iDAAAA,kBAAkBA,CAC1B,iEACAF;YAGJ,MAAMG,eACJH,iBAAiBD,QAAQC,MAAM,OAAO,GAAGI,OAAOJ;YAClD,IAAI,CAAC,OAAO,CAAC,SAAS,CACpBX,sDAAAA,MAAAA,CAAAA,OAAc,EACdC,sDAAAA,cAAAA,CAAAA,SAAwB,EACxB,CAAC,iBAAiB,EAAEa,cAAc;YAEpC,OAAO;gBACL,IAAI,IAAI,CAAC,EAAE;gBACX,OAAOA;YACT;QACF;IACF;IA9EA,YACEE,OAAyB,EACzBC,YAAyC,CACzC;QACA,KAAK,CAACrB,qBAAqBoB,SAAS;YAAE,GAAGC,YAAY;YAAE,IAAI;QAAU;IACvE;AA0EF"}