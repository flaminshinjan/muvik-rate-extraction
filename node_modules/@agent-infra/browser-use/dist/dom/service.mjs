/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__utils_mjs_2b03add0__ from "../utils.mjs";
import * as __WEBPACK_EXTERNAL_MODULE__views_mjs_50feee0f__ from "./views.mjs";
const logger = (0, __WEBPACK_EXTERNAL_MODULE__utils_mjs_2b03add0__.createLogger)('DOMService');
async function getScrollInfo(page) {
    const result = await page.evaluate(()=>{
        const scroll_y = window.scrollY;
        const viewport_height = window.innerHeight;
        const total_height = document.documentElement.scrollHeight;
        return {
            pixels_above: scroll_y,
            pixels_below: total_height - (scroll_y + viewport_height)
        };
    });
    if (!result) throw new Error('Failed to get scroll information');
    return [
        result.pixels_above,
        result.pixels_below
    ];
}
async function getMarkdownContent(page, selector) {
    const result = await page.evaluate((sel)=>window.turn2Markdown(sel), selector || '');
    if (!result) throw new Error('Failed to get markdown content');
    return result;
}
async function getReadabilityContent(page) {
    const result = await page.evaluate(()=>window.parserReadability());
    if (!result) throw new Error('Failed to get readability content');
    return result;
}
async function getClickableElements(page, highlightElements = true, focusElement = -1, viewportExpansion = 0) {
    try {
        const elementTree = await _buildDomTree(page, highlightElements, focusElement, viewportExpansion);
        const selectorMap = createSelectorMap(elementTree);
        return {
            elementTree,
            selectorMap
        };
    } catch (error) {
        logger.error('Failed to build DOM tree:', error);
        return null;
    }
}
function createSelectorMap(elementTree) {
    const selectorMap = new Map();
    function processNode(node) {
        if (node instanceof __WEBPACK_EXTERNAL_MODULE__views_mjs_50feee0f__.DOMElementNode) {
            if (null != node.highlightIndex) selectorMap.set(node.highlightIndex, node);
            node.children.forEach(processNode);
        }
    }
    processNode(elementTree);
    return selectorMap;
}
async function _buildDomTree(page, highlightElements = true, focusElement = -1, viewportExpansion = 0) {
    const rawDomTree = await page.evaluate((args)=>window.buildDomTree(args), {
        doHighlightElements: highlightElements,
        focusHighlightIndex: focusElement,
        viewportExpansion
    });
    if (null !== rawDomTree) {
        const elementTree = parseNode(rawDomTree);
        if (null !== elementTree && elementTree instanceof __WEBPACK_EXTERNAL_MODULE__views_mjs_50feee0f__.DOMElementNode) return elementTree;
    }
    throw new Error('Failed to build DOM tree: Invalid or empty tree structure');
}
function parseNode(nodeData, parent = null) {
    if (!nodeData) return null;
    if ('type' in nodeData) return new __WEBPACK_EXTERNAL_MODULE__views_mjs_50feee0f__.DOMTextNode(nodeData.text, nodeData.isVisible, parent);
    const tagName = nodeData.tagName;
    const viewportCoordinates = nodeData.viewportCoordinates;
    const pageCoordinates = nodeData.pageCoordinates;
    const viewportInfo = nodeData.viewportInfo;
    const elementNode = new __WEBPACK_EXTERNAL_MODULE__views_mjs_50feee0f__.DOMElementNode({
        tagName: tagName,
        xpath: nodeData.xpath,
        cssSelector: nodeData.cssSelector,
        attributes: nodeData.attributes ?? {},
        children: [],
        isVisible: nodeData.isVisible ?? false,
        isInteractive: nodeData.isInteractive ?? false,
        isTopElement: nodeData.isTopElement ?? false,
        highlightIndex: nodeData.highlightIndex,
        viewportCoordinates: viewportCoordinates ?? void 0,
        pageCoordinates: pageCoordinates ?? void 0,
        viewportInfo: viewportInfo ?? void 0,
        shadowRoot: nodeData.shadowRoot ?? false,
        parent
    });
    const children = [];
    for (const child of nodeData.children || [])if (null !== child) {
        const childNode = parseNode(child, elementNode);
        if (null !== childNode) children.push(childNode);
    }
    elementNode.children = children;
    return elementNode;
}
async function removeHighlights(page) {
    try {
        await page.evaluate(()=>{
            const container = document.getElementById('playwright-highlight-container');
            if (container) container.remove();
            const highlightedElements = document.querySelectorAll('[browser-user-highlight-id^="playwright-highlight-"]');
            for (const el of Array.from(highlightedElements))el.removeAttribute('browser-user-highlight-id');
        });
    } catch (error) {
        logger.error('Failed to remove highlights:', error);
    }
}
export { createSelectorMap, getClickableElements, getMarkdownContent, getReadabilityContent, getScrollInfo, parseNode, removeHighlights };

//# sourceMappingURL=service.mjs.map