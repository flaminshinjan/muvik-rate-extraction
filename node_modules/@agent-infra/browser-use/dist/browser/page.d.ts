import { Browser, Page as PuppeteerPage, ElementHandle } from 'puppeteer-core';
import { ReadabilityResult } from '../dom/service';
import { DOMElementNode, type DOMState } from '../dom/views';
import { type BrowserContextConfig, type PageState } from './types';
declare global {
    interface Window {
        turn2Markdown: (selector?: string) => string;
    }
}
export declare function build_initial_state(url?: string, title?: string): PageState;
export default class Page {
    private _browser;
    private _puppeteerPage;
    private _config;
    private _state;
    private _validWebPage;
    constructor(url: string, title: string, config?: Partial<BrowserContextConfig>);
    get browser(): Browser | null;
    get puppeteerPage(): PuppeteerPage | null;
    get validWebPage(): boolean;
    get attached(): boolean;
    executeScript(page: PuppeteerPage, options: {
        contents?: string[];
    }): Promise<any>;
    attachPuppeteer(): Promise<boolean>;
    private _addAntiDetectionScripts;
    detachPuppeteer(): Promise<void>;
    removeHighlight(): Promise<void>;
    getClickableElements(focusElement: number): Promise<DOMState | null>;
    getScrollInfo(): Promise<[number, number]>;
    getContent(): Promise<string>;
    getMarkdownContent(selector?: string): Promise<string>;
    getReadabilityContent(): Promise<ReadabilityResult | null>;
    getState(): Promise<PageState>;
    _updateState(useVision?: boolean, focusElement?: number): Promise<PageState>;
    takeScreenshot(fullPage?: boolean): Promise<string | null>;
    url(): string;
    title(): Promise<string>;
    navigateTo(url: string): Promise<void>;
    refreshPage(): Promise<void>;
    goBack(): Promise<void>;
    goForward(): Promise<void>;
    scrollDown(amount?: number): Promise<void>;
    scrollUp(amount?: number): Promise<void>;
    sendKeys(keys: string): Promise<void>;
    private _convertKey;
    scrollToText(text: string): Promise<boolean>;
    getDropdownOptions(index: number): Promise<Array<{
        index: number;
        text: string;
        value: string;
    }>>;
    selectDropdownOption(index: number, text: string): Promise<string>;
    locateElement(element: DOMElementNode): Promise<ElementHandle | null>;
    inputTextElementNode(useVision: boolean, elementNode: DOMElementNode, text: string): Promise<void>;
    private _scrollIntoViewIfNeeded;
    clickElementNode(useVision: boolean, elementNode: DOMElementNode): Promise<void>;
    getSelectorMap(): Map<number, DOMElementNode>;
    getElementByIndex(index: number): Promise<ElementHandle | null>;
    getDomElementByIndex(index: number): DOMElementNode | null;
    isFileUploader(elementNode: DOMElementNode, maxDepth?: number, currentDepth?: number): boolean;
    waitForPageAndFramesLoad(timeoutOverwrite?: number): Promise<void>;
}
//# sourceMappingURL=page.d.ts.map