import { ElementHandle, Page as PuppeteerPage } from 'puppeteer-core';
import { BrowserContextConfig } from './types';
import { DOMElementNode } from '../dom/views';
export declare function scrollIntoViewIfNeeded(element: ElementHandle, timeout?: number): Promise<void>;
export declare function locateElement(page: PuppeteerPage, element: DOMElementNode, _options?: Partial<BrowserContextConfig>): Promise<ElementHandle | null>;
export declare function waitForStableNetwork(page: PuppeteerPage | null, _options?: Partial<BrowserContextConfig>): Promise<void>;
export declare function waitForPageAndFramesLoad(page: PuppeteerPage | null, 
/** timeout in seconds */
timeoutOverwrite?: number, _options?: Partial<BrowserContextConfig>): Promise<void>;
export declare function waitForPageLoadState(page: PuppeteerPage, timeout?: number): Promise<void>;
//# sourceMappingURL=utils.d.ts.map