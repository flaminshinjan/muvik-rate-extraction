import { BaseLogger, LogLevel } from './types';
export declare class ConsoleLogger extends BaseLogger {
    private prefix;
    private lastPrefixColor;
    private level;
    /**
     * Creates a new console logger instance
     *
     * @param prefix - Optional prefix to prepend to all log messages
     * @param level - Initial log level (defaults to INFO)
     */
    constructor(prefix?: string, level?: LogLevel);
    /**
     * Applies color to the prefix based on log type
     *
     * @param prefix - The prefix string to colorize
     * @param type - Optional log type to determine color
     * @returns Colorized prefix string
     * @private
     */
    private colorPrefix;
    /**
     * Basic log method (equivalent to console.log)
     * Only outputs if log level is DEBUG or lower
     *
     * @param args - Arguments to log
     */
    log(...args: any[]): void;
    /**
     * Logs informational messages
     * Only outputs if log level is INFO or lower
     *
     * @param args - Arguments to log
     */
    info(...args: any[]): void;
    /**
     * Logs warning messages
     * Only outputs if log level is WARN or lower
     *
     * @param args - Arguments to log
     */
    warn(...args: any[]): void;
    /**
     * Logs error messages
     * Only outputs if log level is ERROR or lower
     *
     * @param args - Arguments to log
     */
    error(...args: any[]): void;
    /**
     * Logs success messages
     * Only outputs if log level is SUCCESS or lower
     *
     * @param message - Success message to display
     */
    success(message: string): void;
    /**
     * Logs a message with associated structured data
     * Optionally transforms the data before logging
     * Only outputs if log level is INFO or lower
     *
     * @param message - The message to log
     * @param data - Optional structured data to log
     * @param transformer - Optional function to transform data before logging
     */
    infoWithData<T = any>(message: string, data?: T, transformer?: (value: T) => any): void;
    /**
     * Creates a child logger with a nested prefix
     *
     * @param prefix - Prefix for the child logger
     * @returns A new ConsoleLogger instance with combined prefix
     */
    spawn(prefix: string): ConsoleLogger;
    /**
     * Sets the current log level
     *
     * @param level - New log level to set
     */
    setLevel(level: LogLevel): void;
    /**
     * Gets the current log level
     *
     * @returns Current log level
     */
    getLevel(): LogLevel;
}
//# sourceMappingURL=console-logger.d.ts.map